// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMonitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerMonitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class HeartBeatMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatMessage> {
} _HeartBeatMessage_default_instance_;
class ParamModifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParamModify> {
} _ParamModify_default_instance_;
class CollectDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CollectData> {
} _CollectData_default_instance_;
class AgentCtrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AgentCtrl> {
} _AgentCtrl_default_instance_;
class MysqlOperUnitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MysqlOperUnit> {
} _MysqlOperUnit_default_instance_;
class MysqlOperDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MysqlOperData> {
} _MysqlOperData_default_instance_;
class Insert_SystemLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Insert_SystemLog> {
} _Insert_SystemLog_default_instance_;
class MainMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainMessage> {
} _MainMessage_default_instance_;

namespace protobuf_ServerMonitor_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HeartBeatMessage_default_instance_.Shutdown();
  _ParamModify_default_instance_.Shutdown();
  _CollectData_default_instance_.Shutdown();
  _AgentCtrl_default_instance_.Shutdown();
  _MysqlOperUnit_default_instance_.Shutdown();
  _MysqlOperData_default_instance_.Shutdown();
  _Insert_SystemLog_default_instance_.Shutdown();
  _MainMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HeartBeatMessage_default_instance_.DefaultConstruct();
  _ParamModify_default_instance_.DefaultConstruct();
  _CollectData_default_instance_.DefaultConstruct();
  _AgentCtrl_default_instance_.DefaultConstruct();
  _MysqlOperUnit_default_instance_.DefaultConstruct();
  _MysqlOperData_default_instance_.DefaultConstruct();
  _Insert_SystemLog_default_instance_.DefaultConstruct();
  _MainMessage_default_instance_.DefaultConstruct();
  _MainMessage_default_instance_.get_mutable()->collectdata_ = const_cast< ::CollectData*>(
      ::CollectData::internal_default_instance());
  _MainMessage_default_instance_.get_mutable()->heartbeatmessage_ = const_cast< ::HeartBeatMessage*>(
      ::HeartBeatMessage::internal_default_instance());
  _MainMessage_default_instance_.get_mutable()->mysqloperdata_ = const_cast< ::MysqlOperData*>(
      ::MysqlOperData::internal_default_instance());
  _MainMessage_default_instance_.get_mutable()->insert_systemlog_ = const_cast< ::Insert_SystemLog*>(
      ::Insert_SystemLog::internal_default_instance());
  _MainMessage_default_instance_.get_mutable()->agentctrl_ = const_cast< ::AgentCtrl*>(
      ::AgentCtrl::internal_default_instance());
  _MainMessage_default_instance_.get_mutable()->parammodify_ = const_cast< ::ParamModify*>(
      ::ParamModify::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_ServerMonitor_2eproto

bool ParamModifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool CollectDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool AgentCtrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool MysqlOperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatMessage::kIpAddrFieldNumber;
const int HeartBeatMessage::kTimeFieldNumber;
const int HeartBeatMessage::kDevIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatMessage::HeartBeatMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatMessage)
}
HeartBeatMessage::HeartBeatMessage(const HeartBeatMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddr().size() > 0) {
    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devid().size() > 0) {
    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:HeartBeatMessage)
}

void HeartBeatMessage::SharedCtor() {
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  _cached_size_ = 0;
}

HeartBeatMessage::~HeartBeatMessage() {
  // @@protoc_insertion_point(destructor:HeartBeatMessage)
  SharedDtor();
}

void HeartBeatMessage::SharedDtor() {
  ipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HeartBeatMessage& HeartBeatMessage::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatMessage* HeartBeatMessage::New(::google::protobuf::Arena* arena) const {
  HeartBeatMessage* n = new HeartBeatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatMessage)
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
}

bool HeartBeatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipAddr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HeartBeatMessage.ipAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HeartBeatMessage.devId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatMessage)
  return false;
#undef DO_
}

void HeartBeatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipAddr = 1;
  if (this->ipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HeartBeatMessage.ipAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddr(), output);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // string devId = 3;
  if (this->devid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HeartBeatMessage.devId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devid(), output);
  }

  // @@protoc_insertion_point(serialize_end:HeartBeatMessage)
}

size_t HeartBeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatMessage)
  size_t total_size = 0;

  // string ipAddr = 1;
  if (this->ipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddr());
  }

  // string devId = 3;
  if (this->devid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devid());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartBeatMessage*>(&from));
}

void HeartBeatMessage::MergeFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipaddr().size() > 0) {

    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  if (from.devid().size() > 0) {

    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void HeartBeatMessage::CopyFrom(const HeartBeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatMessage::IsInitialized() const {
  return true;
}

void HeartBeatMessage::Swap(HeartBeatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatMessage::InternalSwap(HeartBeatMessage* other) {
  ipaddr_.Swap(&other->ipaddr_);
  devid_.Swap(&other->devid_);
  std::swap(time_, other->time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HeartBeatMessage::GetTypeName() const {
  return "HeartBeatMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatMessage

// string ipAddr = 1;
void HeartBeatMessage::clear_ipaddr() {
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeartBeatMessage::ipaddr() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.ipAddr)
  return ipaddr_.GetNoArena();
}
void HeartBeatMessage::set_ipaddr(const ::std::string& value) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.ipAddr)
}
#if LANG_CXX11
void HeartBeatMessage::set_ipaddr(::std::string&& value) {
  
  ipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.ipAddr)
}
#endif
void HeartBeatMessage::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.ipAddr)
}
void HeartBeatMessage::set_ipaddr(const char* value, size_t size) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.ipAddr)
}
::std::string* HeartBeatMessage::mutable_ipaddr() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.ipAddr)
  return ipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeartBeatMessage::release_ipaddr() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.ipAddr)
  
  return ipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeartBeatMessage::set_allocated_ipaddr(::std::string* ipaddr) {
  if (ipaddr != NULL) {
    
  } else {
    
  }
  ipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddr);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.ipAddr)
}

// int32 time = 2;
void HeartBeatMessage::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 HeartBeatMessage::time() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.time)
  return time_;
}
void HeartBeatMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.time)
}

// string devId = 3;
void HeartBeatMessage::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeartBeatMessage::devid() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.devId)
  return devid_.GetNoArena();
}
void HeartBeatMessage::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.devId)
}
#if LANG_CXX11
void HeartBeatMessage::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.devId)
}
#endif
void HeartBeatMessage::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.devId)
}
void HeartBeatMessage::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.devId)
}
::std::string* HeartBeatMessage::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeartBeatMessage::release_devid() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeartBeatMessage::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.devId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamModify::kTypeFieldNumber;
const int ParamModify::kIpAddrFieldNumber;
const int ParamModify::kDevIdFieldNumber;
const int ParamModify::kMonitorPathFieldNumber;
const int ParamModify::kFuncFileFieldNumber;
const int ParamModify::kFuncProcessFieldNumber;
const int ParamModify::kFuncPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamModify::ParamModify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ParamModify)
}
ParamModify::ParamModify(const ParamModify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      monitorpath_(from.monitorpath_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddr().size() > 0) {
    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devid().size() > 0) {
    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&func_port_) -
    reinterpret_cast<char*>(&type_) + sizeof(func_port_));
  // @@protoc_insertion_point(copy_constructor:ParamModify)
}

void ParamModify::SharedCtor() {
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&func_port_) -
    reinterpret_cast<char*>(&type_) + sizeof(func_port_));
  _cached_size_ = 0;
}

ParamModify::~ParamModify() {
  // @@protoc_insertion_point(destructor:ParamModify)
  SharedDtor();
}

void ParamModify::SharedDtor() {
  ipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ParamModify& ParamModify::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamModify* ParamModify::New(::google::protobuf::Arena* arena) const {
  ParamModify* n = new ParamModify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamModify::Clear() {
// @@protoc_insertion_point(message_clear_start:ParamModify)
  monitorpath_.Clear();
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&func_port_) -
    reinterpret_cast<char*>(&type_) + sizeof(func_port_));
}

bool ParamModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ParamModify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ParamModifyType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ParamModifyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipAddr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ParamModify.ipAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ParamModify.devId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string monitorPath = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_monitorpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitorpath(this->monitorpath_size() - 1).data(),
            this->monitorpath(this->monitorpath_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ParamModify.monitorPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 func_file = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 func_process = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 func_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ParamModify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ParamModify)
  return false;
#undef DO_
}

void ParamModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ParamModify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ParamModifyType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string ipAddr = 2;
  if (this->ipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ParamModify.ipAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipaddr(), output);
  }

  // string devId = 3;
  if (this->devid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ParamModify.devId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devid(), output);
  }

  // repeated string monitorPath = 4;
  for (int i = 0, n = this->monitorpath_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitorpath(i).data(), this->monitorpath(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ParamModify.monitorPath");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->monitorpath(i), output);
  }

  // int32 func_file = 5;
  if (this->func_file() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->func_file(), output);
  }

  // int32 func_process = 6;
  if (this->func_process() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->func_process(), output);
  }

  // int32 func_port = 7;
  if (this->func_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->func_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:ParamModify)
}

size_t ParamModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParamModify)
  size_t total_size = 0;

  // repeated string monitorPath = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->monitorpath_size());
  for (int i = 0, n = this->monitorpath_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->monitorpath(i));
  }

  // string ipAddr = 2;
  if (this->ipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddr());
  }

  // string devId = 3;
  if (this->devid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devid());
  }

  // .ParamModifyType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 func_file = 5;
  if (this->func_file() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_file());
  }

  // int32 func_process = 6;
  if (this->func_process() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_process());
  }

  // int32 func_port = 7;
  if (this->func_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamModify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ParamModify*>(&from));
}

void ParamModify::MergeFrom(const ParamModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParamModify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monitorpath_.MergeFrom(from.monitorpath_);
  if (from.ipaddr().size() > 0) {

    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  if (from.devid().size() > 0) {

    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.func_file() != 0) {
    set_func_file(from.func_file());
  }
  if (from.func_process() != 0) {
    set_func_process(from.func_process());
  }
  if (from.func_port() != 0) {
    set_func_port(from.func_port());
  }
}

void ParamModify::CopyFrom(const ParamModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParamModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamModify::IsInitialized() const {
  return true;
}

void ParamModify::Swap(ParamModify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamModify::InternalSwap(ParamModify* other) {
  monitorpath_.InternalSwap(&other->monitorpath_);
  ipaddr_.Swap(&other->ipaddr_);
  devid_.Swap(&other->devid_);
  std::swap(type_, other->type_);
  std::swap(func_file_, other->func_file_);
  std::swap(func_process_, other->func_process_);
  std::swap(func_port_, other->func_port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ParamModify::GetTypeName() const {
  return "ParamModify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamModify

// .ParamModifyType type = 1;
void ParamModify::clear_type() {
  type_ = 0;
}
::ParamModifyType ParamModify::type() const {
  // @@protoc_insertion_point(field_get:ParamModify.type)
  return static_cast< ::ParamModifyType >(type_);
}
void ParamModify::set_type(::ParamModifyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ParamModify.type)
}

// string ipAddr = 2;
void ParamModify::clear_ipaddr() {
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ParamModify::ipaddr() const {
  // @@protoc_insertion_point(field_get:ParamModify.ipAddr)
  return ipaddr_.GetNoArena();
}
void ParamModify::set_ipaddr(const ::std::string& value) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParamModify.ipAddr)
}
#if LANG_CXX11
void ParamModify::set_ipaddr(::std::string&& value) {
  
  ipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ParamModify.ipAddr)
}
#endif
void ParamModify::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParamModify.ipAddr)
}
void ParamModify::set_ipaddr(const char* value, size_t size) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParamModify.ipAddr)
}
::std::string* ParamModify::mutable_ipaddr() {
  
  // @@protoc_insertion_point(field_mutable:ParamModify.ipAddr)
  return ipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamModify::release_ipaddr() {
  // @@protoc_insertion_point(field_release:ParamModify.ipAddr)
  
  return ipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamModify::set_allocated_ipaddr(::std::string* ipaddr) {
  if (ipaddr != NULL) {
    
  } else {
    
  }
  ipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddr);
  // @@protoc_insertion_point(field_set_allocated:ParamModify.ipAddr)
}

// string devId = 3;
void ParamModify::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ParamModify::devid() const {
  // @@protoc_insertion_point(field_get:ParamModify.devId)
  return devid_.GetNoArena();
}
void ParamModify::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ParamModify.devId)
}
#if LANG_CXX11
void ParamModify::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ParamModify.devId)
}
#endif
void ParamModify::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ParamModify.devId)
}
void ParamModify::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ParamModify.devId)
}
::std::string* ParamModify::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:ParamModify.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamModify::release_devid() {
  // @@protoc_insertion_point(field_release:ParamModify.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamModify::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:ParamModify.devId)
}

// repeated string monitorPath = 4;
int ParamModify::monitorpath_size() const {
  return monitorpath_.size();
}
void ParamModify::clear_monitorpath() {
  monitorpath_.Clear();
}
const ::std::string& ParamModify::monitorpath(int index) const {
  // @@protoc_insertion_point(field_get:ParamModify.monitorPath)
  return monitorpath_.Get(index);
}
::std::string* ParamModify::mutable_monitorpath(int index) {
  // @@protoc_insertion_point(field_mutable:ParamModify.monitorPath)
  return monitorpath_.Mutable(index);
}
void ParamModify::set_monitorpath(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ParamModify.monitorPath)
  monitorpath_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ParamModify::set_monitorpath(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ParamModify.monitorPath)
  monitorpath_.Mutable(index)->assign(std::move(value));
}
#endif
void ParamModify::set_monitorpath(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  monitorpath_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ParamModify.monitorPath)
}
void ParamModify::set_monitorpath(int index, const char* value, size_t size) {
  monitorpath_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ParamModify.monitorPath)
}
::std::string* ParamModify::add_monitorpath() {
  // @@protoc_insertion_point(field_add_mutable:ParamModify.monitorPath)
  return monitorpath_.Add();
}
void ParamModify::add_monitorpath(const ::std::string& value) {
  monitorpath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ParamModify.monitorPath)
}
#if LANG_CXX11
void ParamModify::add_monitorpath(::std::string&& value) {
  monitorpath_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ParamModify.monitorPath)
}
#endif
void ParamModify::add_monitorpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  monitorpath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ParamModify.monitorPath)
}
void ParamModify::add_monitorpath(const char* value, size_t size) {
  monitorpath_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ParamModify.monitorPath)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamModify::monitorpath() const {
  // @@protoc_insertion_point(field_list:ParamModify.monitorPath)
  return monitorpath_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ParamModify::mutable_monitorpath() {
  // @@protoc_insertion_point(field_mutable_list:ParamModify.monitorPath)
  return &monitorpath_;
}

// int32 func_file = 5;
void ParamModify::clear_func_file() {
  func_file_ = 0;
}
::google::protobuf::int32 ParamModify::func_file() const {
  // @@protoc_insertion_point(field_get:ParamModify.func_file)
  return func_file_;
}
void ParamModify::set_func_file(::google::protobuf::int32 value) {
  
  func_file_ = value;
  // @@protoc_insertion_point(field_set:ParamModify.func_file)
}

// int32 func_process = 6;
void ParamModify::clear_func_process() {
  func_process_ = 0;
}
::google::protobuf::int32 ParamModify::func_process() const {
  // @@protoc_insertion_point(field_get:ParamModify.func_process)
  return func_process_;
}
void ParamModify::set_func_process(::google::protobuf::int32 value) {
  
  func_process_ = value;
  // @@protoc_insertion_point(field_set:ParamModify.func_process)
}

// int32 func_port = 7;
void ParamModify::clear_func_port() {
  func_port_ = 0;
}
::google::protobuf::int32 ParamModify::func_port() const {
  // @@protoc_insertion_point(field_get:ParamModify.func_port)
  return func_port_;
}
void ParamModify::set_func_port(::google::protobuf::int32 value) {
  
  func_port_ = value;
  // @@protoc_insertion_point(field_set:ParamModify.func_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectData::kDataTypeFieldNumber;
const int CollectData::kDevIdFieldNumber;
const int CollectData::kFilePathFieldNumber;
const int CollectData::kStateFieldNumber;
const int CollectData::kTimeFieldNumber;
const int CollectData::kPidFieldNumber;
const int CollectData::kProcNameFieldNumber;
const int CollectData::kPortTypeFieldNumber;
const int CollectData::kPortNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectData::CollectData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CollectData)
}
CollectData::CollectData(const CollectData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devid().size() > 0) {
    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pid().size() > 0) {
    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  procname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.procname().size() > 0) {
    procname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.procname_);
  }
  porttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.porttype().size() > 0) {
    porttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.porttype_);
  }
  portname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.portname().size() > 0) {
    portname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portname_);
  }
  datatype_ = from.datatype_;
  // @@protoc_insertion_point(copy_constructor:CollectData)
}

void CollectData::SharedCtor() {
  devid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0;
  _cached_size_ = 0;
}

CollectData::~CollectData() {
  // @@protoc_insertion_point(destructor:CollectData)
  SharedDtor();
}

void CollectData::SharedDtor() {
  devid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porttype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CollectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CollectData& CollectData::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CollectData* CollectData::New(::google::protobuf::Arena* arena) const {
  CollectData* n = new CollectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollectData::Clear() {
// @@protoc_insertion_point(message_clear_start:CollectData)
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  porttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0;
}

bool CollectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CollectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CollectDataType dataType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::CollectDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string devId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devid().data(), this->devid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.devId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filePath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.filePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.pid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string procName = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->procname().data(), this->procname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.procName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string portType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_porttype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->porttype().data(), this->porttype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.portType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string portName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->portname().data(), this->portname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CollectData.portName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CollectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CollectData)
  return false;
#undef DO_
}

void CollectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CollectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CollectDataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // string devId = 2;
  if (this->devid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devid().data(), this->devid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.devId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devid(), output);
  }

  // string filePath = 3;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.filePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filepath(), output);
  }

  // string state = 4;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // string time = 5;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->time(), output);
  }

  // string pid = 6;
  if (this->pid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pid(), output);
  }

  // string procName = 7;
  if (this->procname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->procname().data(), this->procname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.procName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->procname(), output);
  }

  // string portType = 8;
  if (this->porttype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->porttype().data(), this->porttype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.portType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->porttype(), output);
  }

  // string portName = 9;
  if (this->portname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->portname().data(), this->portname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CollectData.portName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->portname(), output);
  }

  // @@protoc_insertion_point(serialize_end:CollectData)
}

size_t CollectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CollectData)
  size_t total_size = 0;

  // string devId = 2;
  if (this->devid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devid());
  }

  // string filePath = 3;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // string state = 4;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string time = 5;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // string pid = 6;
  if (this->pid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  // string procName = 7;
  if (this->procname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->procname());
  }

  // string portType = 8;
  if (this->porttype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->porttype());
  }

  // string portName = 9;
  if (this->portname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->portname());
  }

  // .CollectDataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CollectData*>(&from));
}

void CollectData::MergeFrom(const CollectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CollectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devid().size() > 0) {

    devid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devid_);
  }
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.pid().size() > 0) {

    pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
  }
  if (from.procname().size() > 0) {

    procname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.procname_);
  }
  if (from.porttype().size() > 0) {

    porttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.porttype_);
  }
  if (from.portname().size() > 0) {

    portname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portname_);
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void CollectData::CopyFrom(const CollectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CollectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectData::IsInitialized() const {
  return true;
}

void CollectData::Swap(CollectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollectData::InternalSwap(CollectData* other) {
  devid_.Swap(&other->devid_);
  filepath_.Swap(&other->filepath_);
  state_.Swap(&other->state_);
  time_.Swap(&other->time_);
  pid_.Swap(&other->pid_);
  procname_.Swap(&other->procname_);
  porttype_.Swap(&other->porttype_);
  portname_.Swap(&other->portname_);
  std::swap(datatype_, other->datatype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CollectData::GetTypeName() const {
  return "CollectData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectData

// .CollectDataType dataType = 1;
void CollectData::clear_datatype() {
  datatype_ = 0;
}
::CollectDataType CollectData::datatype() const {
  // @@protoc_insertion_point(field_get:CollectData.dataType)
  return static_cast< ::CollectDataType >(datatype_);
}
void CollectData::set_datatype(::CollectDataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:CollectData.dataType)
}

// string devId = 2;
void CollectData::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::devid() const {
  // @@protoc_insertion_point(field_get:CollectData.devId)
  return devid_.GetNoArena();
}
void CollectData::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.devId)
}
#if LANG_CXX11
void CollectData::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.devId)
}
#endif
void CollectData::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.devId)
}
void CollectData::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.devId)
}
::std::string* CollectData::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_devid() {
  // @@protoc_insertion_point(field_release:CollectData.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:CollectData.devId)
}

// string filePath = 3;
void CollectData::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::filepath() const {
  // @@protoc_insertion_point(field_get:CollectData.filePath)
  return filepath_.GetNoArena();
}
void CollectData::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.filePath)
}
#if LANG_CXX11
void CollectData::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.filePath)
}
#endif
void CollectData::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.filePath)
}
void CollectData::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.filePath)
}
::std::string* CollectData::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.filePath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_filepath() {
  // @@protoc_insertion_point(field_release:CollectData.filePath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:CollectData.filePath)
}

// string state = 4;
void CollectData::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::state() const {
  // @@protoc_insertion_point(field_get:CollectData.state)
  return state_.GetNoArena();
}
void CollectData::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.state)
}
#if LANG_CXX11
void CollectData::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.state)
}
#endif
void CollectData::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.state)
}
void CollectData::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.state)
}
::std::string* CollectData::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_state() {
  // @@protoc_insertion_point(field_release:CollectData.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:CollectData.state)
}

// string time = 5;
void CollectData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::time() const {
  // @@protoc_insertion_point(field_get:CollectData.time)
  return time_.GetNoArena();
}
void CollectData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.time)
}
#if LANG_CXX11
void CollectData::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.time)
}
#endif
void CollectData::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.time)
}
void CollectData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.time)
}
::std::string* CollectData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_time() {
  // @@protoc_insertion_point(field_release:CollectData.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:CollectData.time)
}

// string pid = 6;
void CollectData::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::pid() const {
  // @@protoc_insertion_point(field_get:CollectData.pid)
  return pid_.GetNoArena();
}
void CollectData::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.pid)
}
#if LANG_CXX11
void CollectData::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.pid)
}
#endif
void CollectData::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.pid)
}
void CollectData::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.pid)
}
::std::string* CollectData::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_pid() {
  // @@protoc_insertion_point(field_release:CollectData.pid)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:CollectData.pid)
}

// string procName = 7;
void CollectData::clear_procname() {
  procname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::procname() const {
  // @@protoc_insertion_point(field_get:CollectData.procName)
  return procname_.GetNoArena();
}
void CollectData::set_procname(const ::std::string& value) {
  
  procname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.procName)
}
#if LANG_CXX11
void CollectData::set_procname(::std::string&& value) {
  
  procname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.procName)
}
#endif
void CollectData::set_procname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  procname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.procName)
}
void CollectData::set_procname(const char* value, size_t size) {
  
  procname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.procName)
}
::std::string* CollectData::mutable_procname() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.procName)
  return procname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_procname() {
  // @@protoc_insertion_point(field_release:CollectData.procName)
  
  return procname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_procname(::std::string* procname) {
  if (procname != NULL) {
    
  } else {
    
  }
  procname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), procname);
  // @@protoc_insertion_point(field_set_allocated:CollectData.procName)
}

// string portType = 8;
void CollectData::clear_porttype() {
  porttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::porttype() const {
  // @@protoc_insertion_point(field_get:CollectData.portType)
  return porttype_.GetNoArena();
}
void CollectData::set_porttype(const ::std::string& value) {
  
  porttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.portType)
}
#if LANG_CXX11
void CollectData::set_porttype(::std::string&& value) {
  
  porttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.portType)
}
#endif
void CollectData::set_porttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  porttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.portType)
}
void CollectData::set_porttype(const char* value, size_t size) {
  
  porttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.portType)
}
::std::string* CollectData::mutable_porttype() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.portType)
  return porttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_porttype() {
  // @@protoc_insertion_point(field_release:CollectData.portType)
  
  return porttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_porttype(::std::string* porttype) {
  if (porttype != NULL) {
    
  } else {
    
  }
  porttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), porttype);
  // @@protoc_insertion_point(field_set_allocated:CollectData.portType)
}

// string portName = 9;
void CollectData::clear_portname() {
  portname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CollectData::portname() const {
  // @@protoc_insertion_point(field_get:CollectData.portName)
  return portname_.GetNoArena();
}
void CollectData::set_portname(const ::std::string& value) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.portName)
}
#if LANG_CXX11
void CollectData::set_portname(::std::string&& value) {
  
  portname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.portName)
}
#endif
void CollectData::set_portname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.portName)
}
void CollectData::set_portname(const char* value, size_t size) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.portName)
}
::std::string* CollectData::mutable_portname() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.portName)
  return portname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CollectData::release_portname() {
  // @@protoc_insertion_point(field_release:CollectData.portName)
  
  return portname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CollectData::set_allocated_portname(::std::string* portname) {
  if (portname != NULL) {
    
  } else {
    
  }
  portname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portname);
  // @@protoc_insertion_point(field_set_allocated:CollectData.portName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AgentCtrl::kIpAddrFieldNumber;
const int AgentCtrl::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AgentCtrl::AgentCtrl()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AgentCtrl)
}
AgentCtrl::AgentCtrl(const AgentCtrl& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddr().size() > 0) {
    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:AgentCtrl)
}

void AgentCtrl::SharedCtor() {
  ipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

AgentCtrl::~AgentCtrl() {
  // @@protoc_insertion_point(destructor:AgentCtrl)
  SharedDtor();
}

void AgentCtrl::SharedDtor() {
  ipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AgentCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AgentCtrl& AgentCtrl::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

AgentCtrl* AgentCtrl::New(::google::protobuf::Arena* arena) const {
  AgentCtrl* n = new AgentCtrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AgentCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:AgentCtrl)
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool AgentCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AgentCtrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ipAddr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AgentCtrl.ipAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AgentCtrlType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AgentCtrlType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AgentCtrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AgentCtrl)
  return false;
#undef DO_
}

void AgentCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AgentCtrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipAddr = 1;
  if (this->ipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AgentCtrl.ipAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddr(), output);
  }

  // .AgentCtrlType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:AgentCtrl)
}

size_t AgentCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AgentCtrl)
  size_t total_size = 0;

  // string ipAddr = 1;
  if (this->ipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddr());
  }

  // .AgentCtrlType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentCtrl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AgentCtrl*>(&from));
}

void AgentCtrl::MergeFrom(const AgentCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AgentCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipaddr().size() > 0) {

    ipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddr_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AgentCtrl::CopyFrom(const AgentCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AgentCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentCtrl::IsInitialized() const {
  return true;
}

void AgentCtrl::Swap(AgentCtrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AgentCtrl::InternalSwap(AgentCtrl* other) {
  ipaddr_.Swap(&other->ipaddr_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AgentCtrl::GetTypeName() const {
  return "AgentCtrl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AgentCtrl

// string ipAddr = 1;
void AgentCtrl::clear_ipaddr() {
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AgentCtrl::ipaddr() const {
  // @@protoc_insertion_point(field_get:AgentCtrl.ipAddr)
  return ipaddr_.GetNoArena();
}
void AgentCtrl::set_ipaddr(const ::std::string& value) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AgentCtrl.ipAddr)
}
#if LANG_CXX11
void AgentCtrl::set_ipaddr(::std::string&& value) {
  
  ipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AgentCtrl.ipAddr)
}
#endif
void AgentCtrl::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AgentCtrl.ipAddr)
}
void AgentCtrl::set_ipaddr(const char* value, size_t size) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AgentCtrl.ipAddr)
}
::std::string* AgentCtrl::mutable_ipaddr() {
  
  // @@protoc_insertion_point(field_mutable:AgentCtrl.ipAddr)
  return ipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentCtrl::release_ipaddr() {
  // @@protoc_insertion_point(field_release:AgentCtrl.ipAddr)
  
  return ipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentCtrl::set_allocated_ipaddr(::std::string* ipaddr) {
  if (ipaddr != NULL) {
    
  } else {
    
  }
  ipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddr);
  // @@protoc_insertion_point(field_set_allocated:AgentCtrl.ipAddr)
}

// .AgentCtrlType type = 2;
void AgentCtrl::clear_type() {
  type_ = 0;
}
::AgentCtrlType AgentCtrl::type() const {
  // @@protoc_insertion_point(field_get:AgentCtrl.type)
  return static_cast< ::AgentCtrlType >(type_);
}
void AgentCtrl::set_type(::AgentCtrlType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AgentCtrl.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlOperUnit::kTypeFieldNumber;
const int MysqlOperUnit::kOperDescFieldNumber;
const int MysqlOperUnit::kSqlStrFieldNumber;
const int MysqlOperUnit::kSqlLogTypeFieldNumber;
const int MysqlOperUnit::kOperFlagFieldNumber;
const int MysqlOperUnit::kRequltListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlOperUnit::MysqlOperUnit()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MysqlOperUnit)
}
MysqlOperUnit::MysqlOperUnit(const MysqlOperUnit& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      requltlist_(from.requltlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operdesc().size() > 0) {
    operdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operdesc_);
  }
  sqlstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sqlstr().size() > 0) {
    sqlstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlstr_);
  }
  sqllogtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sqllogtype().size() > 0) {
    sqllogtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqllogtype_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&operflag_) -
    reinterpret_cast<char*>(&type_) + sizeof(operflag_));
  // @@protoc_insertion_point(copy_constructor:MysqlOperUnit)
}

void MysqlOperUnit::SharedCtor() {
  operdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqlstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqllogtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&operflag_) -
    reinterpret_cast<char*>(&type_) + sizeof(operflag_));
  _cached_size_ = 0;
}

MysqlOperUnit::~MysqlOperUnit() {
  // @@protoc_insertion_point(destructor:MysqlOperUnit)
  SharedDtor();
}

void MysqlOperUnit::SharedDtor() {
  operdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqlstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqllogtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlOperUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MysqlOperUnit& MysqlOperUnit::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

MysqlOperUnit* MysqlOperUnit::New(::google::protobuf::Arena* arena) const {
  MysqlOperUnit* n = new MysqlOperUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MysqlOperUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:MysqlOperUnit)
  requltlist_.Clear();
  operdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sqllogtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&operflag_) -
    reinterpret_cast<char*>(&type_) + sizeof(operflag_));
}

bool MysqlOperUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MysqlOperUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MysqlOperType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MysqlOperType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operDesc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operdesc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operdesc().data(), this->operdesc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperUnit.operDesc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sqlStr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sqlstr().data(), this->sqlstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperUnit.sqlStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sqlLogType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqllogtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sqllogtype().data(), this->sqllogtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperUnit.sqlLogType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool operFlag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requltList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requltlist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requltlist(this->requltlist_size() - 1).data(),
            this->requltlist(this->requltlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperUnit.requltList"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MysqlOperUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MysqlOperUnit)
  return false;
#undef DO_
}

void MysqlOperUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MysqlOperUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MysqlOperType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string operDesc = 2;
  if (this->operdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operdesc().data(), this->operdesc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperUnit.operDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operdesc(), output);
  }

  // string sqlStr = 3;
  if (this->sqlstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperUnit.sqlStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sqlstr(), output);
  }

  // string sqlLogType = 4;
  if (this->sqllogtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sqllogtype().data(), this->sqllogtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperUnit.sqlLogType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sqllogtype(), output);
  }

  // bool operFlag = 5;
  if (this->operflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->operflag(), output);
  }

  // repeated string requltList = 6;
  for (int i = 0, n = this->requltlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requltlist(i).data(), this->requltlist(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperUnit.requltList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->requltlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MysqlOperUnit)
}

size_t MysqlOperUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MysqlOperUnit)
  size_t total_size = 0;

  // repeated string requltList = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requltlist_size());
  for (int i = 0, n = this->requltlist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requltlist(i));
  }

  // string operDesc = 2;
  if (this->operdesc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operdesc());
  }

  // string sqlStr = 3;
  if (this->sqlstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sqlstr());
  }

  // string sqlLogType = 4;
  if (this->sqllogtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sqllogtype());
  }

  // .MysqlOperType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool operFlag = 5;
  if (this->operflag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlOperUnit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MysqlOperUnit*>(&from));
}

void MysqlOperUnit::MergeFrom(const MysqlOperUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MysqlOperUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requltlist_.MergeFrom(from.requltlist_);
  if (from.operdesc().size() > 0) {

    operdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operdesc_);
  }
  if (from.sqlstr().size() > 0) {

    sqlstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlstr_);
  }
  if (from.sqllogtype().size() > 0) {

    sqllogtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqllogtype_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.operflag() != 0) {
    set_operflag(from.operflag());
  }
}

void MysqlOperUnit::CopyFrom(const MysqlOperUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MysqlOperUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlOperUnit::IsInitialized() const {
  return true;
}

void MysqlOperUnit::Swap(MysqlOperUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlOperUnit::InternalSwap(MysqlOperUnit* other) {
  requltlist_.InternalSwap(&other->requltlist_);
  operdesc_.Swap(&other->operdesc_);
  sqlstr_.Swap(&other->sqlstr_);
  sqllogtype_.Swap(&other->sqllogtype_);
  std::swap(type_, other->type_);
  std::swap(operflag_, other->operflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MysqlOperUnit::GetTypeName() const {
  return "MysqlOperUnit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MysqlOperUnit

// .MysqlOperType type = 1;
void MysqlOperUnit::clear_type() {
  type_ = 0;
}
::MysqlOperType MysqlOperUnit::type() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.type)
  return static_cast< ::MysqlOperType >(type_);
}
void MysqlOperUnit::set_type(::MysqlOperType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MysqlOperUnit.type)
}

// string operDesc = 2;
void MysqlOperUnit::clear_operdesc() {
  operdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperUnit::operdesc() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.operDesc)
  return operdesc_.GetNoArena();
}
void MysqlOperUnit::set_operdesc(const ::std::string& value) {
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.operDesc)
}
#if LANG_CXX11
void MysqlOperUnit::set_operdesc(::std::string&& value) {
  
  operdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.operDesc)
}
#endif
void MysqlOperUnit::set_operdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.operDesc)
}
void MysqlOperUnit::set_operdesc(const char* value, size_t size) {
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.operDesc)
}
::std::string* MysqlOperUnit::mutable_operdesc() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.operDesc)
  return operdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperUnit::release_operdesc() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.operDesc)
  
  return operdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperUnit::set_allocated_operdesc(::std::string* operdesc) {
  if (operdesc != NULL) {
    
  } else {
    
  }
  operdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operdesc);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.operDesc)
}

// string sqlStr = 3;
void MysqlOperUnit::clear_sqlstr() {
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperUnit::sqlstr() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.sqlStr)
  return sqlstr_.GetNoArena();
}
void MysqlOperUnit::set_sqlstr(const ::std::string& value) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.sqlStr)
}
#if LANG_CXX11
void MysqlOperUnit::set_sqlstr(::std::string&& value) {
  
  sqlstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.sqlStr)
}
#endif
void MysqlOperUnit::set_sqlstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.sqlStr)
}
void MysqlOperUnit::set_sqlstr(const char* value, size_t size) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.sqlStr)
}
::std::string* MysqlOperUnit::mutable_sqlstr() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.sqlStr)
  return sqlstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperUnit::release_sqlstr() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.sqlStr)
  
  return sqlstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperUnit::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr != NULL) {
    
  } else {
    
  }
  sqlstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqlstr);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.sqlStr)
}

// string sqlLogType = 4;
void MysqlOperUnit::clear_sqllogtype() {
  sqllogtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperUnit::sqllogtype() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.sqlLogType)
  return sqllogtype_.GetNoArena();
}
void MysqlOperUnit::set_sqllogtype(const ::std::string& value) {
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.sqlLogType)
}
#if LANG_CXX11
void MysqlOperUnit::set_sqllogtype(::std::string&& value) {
  
  sqllogtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.sqlLogType)
}
#endif
void MysqlOperUnit::set_sqllogtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.sqlLogType)
}
void MysqlOperUnit::set_sqllogtype(const char* value, size_t size) {
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.sqlLogType)
}
::std::string* MysqlOperUnit::mutable_sqllogtype() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.sqlLogType)
  return sqllogtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperUnit::release_sqllogtype() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.sqlLogType)
  
  return sqllogtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperUnit::set_allocated_sqllogtype(::std::string* sqllogtype) {
  if (sqllogtype != NULL) {
    
  } else {
    
  }
  sqllogtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqllogtype);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.sqlLogType)
}

// bool operFlag = 5;
void MysqlOperUnit::clear_operflag() {
  operflag_ = false;
}
bool MysqlOperUnit::operflag() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.operFlag)
  return operflag_;
}
void MysqlOperUnit::set_operflag(bool value) {
  
  operflag_ = value;
  // @@protoc_insertion_point(field_set:MysqlOperUnit.operFlag)
}

// repeated string requltList = 6;
int MysqlOperUnit::requltlist_size() const {
  return requltlist_.size();
}
void MysqlOperUnit::clear_requltlist() {
  requltlist_.Clear();
}
const ::std::string& MysqlOperUnit::requltlist(int index) const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.requltList)
  return requltlist_.Get(index);
}
::std::string* MysqlOperUnit::mutable_requltlist(int index) {
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.requltList)
  return requltlist_.Mutable(index);
}
void MysqlOperUnit::set_requltlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MysqlOperUnit.requltList)
  requltlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MysqlOperUnit::set_requltlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:MysqlOperUnit.requltList)
  requltlist_.Mutable(index)->assign(std::move(value));
}
#endif
void MysqlOperUnit::set_requltlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requltlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.requltList)
}
void MysqlOperUnit::set_requltlist(int index, const char* value, size_t size) {
  requltlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.requltList)
}
::std::string* MysqlOperUnit::add_requltlist() {
  // @@protoc_insertion_point(field_add_mutable:MysqlOperUnit.requltList)
  return requltlist_.Add();
}
void MysqlOperUnit::add_requltlist(const ::std::string& value) {
  requltlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MysqlOperUnit.requltList)
}
#if LANG_CXX11
void MysqlOperUnit::add_requltlist(::std::string&& value) {
  requltlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MysqlOperUnit.requltList)
}
#endif
void MysqlOperUnit::add_requltlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requltlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MysqlOperUnit.requltList)
}
void MysqlOperUnit::add_requltlist(const char* value, size_t size) {
  requltlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MysqlOperUnit.requltList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlOperUnit::requltlist() const {
  // @@protoc_insertion_point(field_list:MysqlOperUnit.requltList)
  return requltlist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlOperUnit::mutable_requltlist() {
  // @@protoc_insertion_point(field_mutable_list:MysqlOperUnit.requltList)
  return &requltlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MysqlOperData::kFuncIdFieldNumber;
const int MysqlOperData::kAssetIdFieldNumber;
const int MysqlOperData::kOperUnitFieldNumber;
const int MysqlOperData::kUserNameFieldNumber;
const int MysqlOperData::kRoleNameFieldNumber;
const int MysqlOperData::kLoginAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MysqlOperData::MysqlOperData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MysqlOperData)
}
MysqlOperData::MysqlOperData(const MysqlOperData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      operunit_(from.operunit_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.funcid().size() > 0) {
    funcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.funcid_);
  }
  assetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assetid().size() > 0) {
    assetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assetid_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rolename().size() > 0) {
    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  loginaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loginaddr().size() > 0) {
    loginaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginaddr_);
  }
  // @@protoc_insertion_point(copy_constructor:MysqlOperData)
}

void MysqlOperData::SharedCtor() {
  funcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MysqlOperData::~MysqlOperData() {
  // @@protoc_insertion_point(destructor:MysqlOperData)
  SharedDtor();
}

void MysqlOperData::SharedDtor() {
  funcid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rolename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MysqlOperData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MysqlOperData& MysqlOperData::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

MysqlOperData* MysqlOperData::New(::google::protobuf::Arena* arena) const {
  MysqlOperData* n = new MysqlOperData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MysqlOperData::Clear() {
// @@protoc_insertion_point(message_clear_start:MysqlOperData)
  operunit_.Clear();
  funcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loginaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MysqlOperData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MysqlOperData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string funcId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funcid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->funcid().data(), this->funcid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperData.funcId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assetid().data(), this->assetid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperData.assetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MysqlOperUnit operUnit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operunit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperData.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roleName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperData.roleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string loginAddr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->loginaddr().data(), this->loginaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MysqlOperData.loginAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MysqlOperData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MysqlOperData)
  return false;
#undef DO_
}

void MysqlOperData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MysqlOperData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string funcId = 1;
  if (this->funcid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->funcid().data(), this->funcid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperData.funcId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->funcid(), output);
  }

  // string assetId = 2;
  if (this->assetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assetid().data(), this->assetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperData.assetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->assetid(), output);
  }

  // repeated .MysqlOperUnit operUnit = 3;
  for (unsigned int i = 0, n = this->operunit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->operunit(i), output);
  }

  // string userName = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperData.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // string roleName = 5;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperData.roleName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rolename(), output);
  }

  // string loginAddr = 6;
  if (this->loginaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->loginaddr().data(), this->loginaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MysqlOperData.loginAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->loginaddr(), output);
  }

  // @@protoc_insertion_point(serialize_end:MysqlOperData)
}

size_t MysqlOperData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MysqlOperData)
  size_t total_size = 0;

  // repeated .MysqlOperUnit operUnit = 3;
  {
    unsigned int count = this->operunit_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operunit(i));
    }
  }

  // string funcId = 1;
  if (this->funcid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->funcid());
  }

  // string assetId = 2;
  if (this->assetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assetid());
  }

  // string userName = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string roleName = 5;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rolename());
  }

  // string loginAddr = 6;
  if (this->loginaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->loginaddr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlOperData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MysqlOperData*>(&from));
}

void MysqlOperData::MergeFrom(const MysqlOperData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MysqlOperData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operunit_.MergeFrom(from.operunit_);
  if (from.funcid().size() > 0) {

    funcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.funcid_);
  }
  if (from.assetid().size() > 0) {

    assetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assetid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.rolename().size() > 0) {

    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  if (from.loginaddr().size() > 0) {

    loginaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loginaddr_);
  }
}

void MysqlOperData::CopyFrom(const MysqlOperData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MysqlOperData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlOperData::IsInitialized() const {
  return true;
}

void MysqlOperData::Swap(MysqlOperData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MysqlOperData::InternalSwap(MysqlOperData* other) {
  operunit_.InternalSwap(&other->operunit_);
  funcid_.Swap(&other->funcid_);
  assetid_.Swap(&other->assetid_);
  username_.Swap(&other->username_);
  rolename_.Swap(&other->rolename_);
  loginaddr_.Swap(&other->loginaddr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MysqlOperData::GetTypeName() const {
  return "MysqlOperData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MysqlOperData

// string funcId = 1;
void MysqlOperData::clear_funcid() {
  funcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperData::funcid() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.funcId)
  return funcid_.GetNoArena();
}
void MysqlOperData::set_funcid(const ::std::string& value) {
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.funcId)
}
#if LANG_CXX11
void MysqlOperData::set_funcid(::std::string&& value) {
  
  funcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.funcId)
}
#endif
void MysqlOperData::set_funcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.funcId)
}
void MysqlOperData::set_funcid(const char* value, size_t size) {
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.funcId)
}
::std::string* MysqlOperData::mutable_funcid() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.funcId)
  return funcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperData::release_funcid() {
  // @@protoc_insertion_point(field_release:MysqlOperData.funcId)
  
  return funcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperData::set_allocated_funcid(::std::string* funcid) {
  if (funcid != NULL) {
    
  } else {
    
  }
  funcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), funcid);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.funcId)
}

// string assetId = 2;
void MysqlOperData::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperData::assetid() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.assetId)
  return assetid_.GetNoArena();
}
void MysqlOperData::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.assetId)
}
#if LANG_CXX11
void MysqlOperData::set_assetid(::std::string&& value) {
  
  assetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.assetId)
}
#endif
void MysqlOperData::set_assetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.assetId)
}
void MysqlOperData::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.assetId)
}
::std::string* MysqlOperData::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperData::release_assetid() {
  // @@protoc_insertion_point(field_release:MysqlOperData.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperData::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.assetId)
}

// repeated .MysqlOperUnit operUnit = 3;
int MysqlOperData::operunit_size() const {
  return operunit_.size();
}
void MysqlOperData::clear_operunit() {
  operunit_.Clear();
}
const ::MysqlOperUnit& MysqlOperData::operunit(int index) const {
  // @@protoc_insertion_point(field_get:MysqlOperData.operUnit)
  return operunit_.Get(index);
}
::MysqlOperUnit* MysqlOperData::mutable_operunit(int index) {
  // @@protoc_insertion_point(field_mutable:MysqlOperData.operUnit)
  return operunit_.Mutable(index);
}
::MysqlOperUnit* MysqlOperData::add_operunit() {
  // @@protoc_insertion_point(field_add:MysqlOperData.operUnit)
  return operunit_.Add();
}
::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >*
MysqlOperData::mutable_operunit() {
  // @@protoc_insertion_point(field_mutable_list:MysqlOperData.operUnit)
  return &operunit_;
}
const ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >&
MysqlOperData::operunit() const {
  // @@protoc_insertion_point(field_list:MysqlOperData.operUnit)
  return operunit_;
}

// string userName = 4;
void MysqlOperData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperData::username() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.userName)
  return username_.GetNoArena();
}
void MysqlOperData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.userName)
}
#if LANG_CXX11
void MysqlOperData::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.userName)
}
#endif
void MysqlOperData::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.userName)
}
void MysqlOperData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.userName)
}
::std::string* MysqlOperData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperData::release_username() {
  // @@protoc_insertion_point(field_release:MysqlOperData.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.userName)
}

// string roleName = 5;
void MysqlOperData::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperData::rolename() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.roleName)
  return rolename_.GetNoArena();
}
void MysqlOperData::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.roleName)
}
#if LANG_CXX11
void MysqlOperData::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.roleName)
}
#endif
void MysqlOperData::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.roleName)
}
void MysqlOperData::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.roleName)
}
::std::string* MysqlOperData::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperData::release_rolename() {
  // @@protoc_insertion_point(field_release:MysqlOperData.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperData::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.roleName)
}

// string loginAddr = 6;
void MysqlOperData::clear_loginaddr() {
  loginaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MysqlOperData::loginaddr() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.loginAddr)
  return loginaddr_.GetNoArena();
}
void MysqlOperData::set_loginaddr(const ::std::string& value) {
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.loginAddr)
}
#if LANG_CXX11
void MysqlOperData::set_loginaddr(::std::string&& value) {
  
  loginaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.loginAddr)
}
#endif
void MysqlOperData::set_loginaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.loginAddr)
}
void MysqlOperData::set_loginaddr(const char* value, size_t size) {
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.loginAddr)
}
::std::string* MysqlOperData::mutable_loginaddr() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.loginAddr)
  return loginaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MysqlOperData::release_loginaddr() {
  // @@protoc_insertion_point(field_release:MysqlOperData.loginAddr)
  
  return loginaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MysqlOperData::set_allocated_loginaddr(::std::string* loginaddr) {
  if (loginaddr != NULL) {
    
  } else {
    
  }
  loginaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginaddr);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.loginAddr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Insert_SystemLog::kSqlStrFieldNumber;
const int Insert_SystemLog::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Insert_SystemLog::Insert_SystemLog()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Insert_SystemLog)
}
Insert_SystemLog::Insert_SystemLog(const Insert_SystemLog& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sqlstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sqlstr().size() > 0) {
    sqlstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlstr_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Insert_SystemLog)
}

void Insert_SystemLog::SharedCtor() {
  sqlstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _cached_size_ = 0;
}

Insert_SystemLog::~Insert_SystemLog() {
  // @@protoc_insertion_point(destructor:Insert_SystemLog)
  SharedDtor();
}

void Insert_SystemLog::SharedDtor() {
  sqlstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Insert_SystemLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Insert_SystemLog& Insert_SystemLog::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

Insert_SystemLog* Insert_SystemLog::New(::google::protobuf::Arena* arena) const {
  Insert_SystemLog* n = new Insert_SystemLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Insert_SystemLog::Clear() {
// @@protoc_insertion_point(message_clear_start:Insert_SystemLog)
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

bool Insert_SystemLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Insert_SystemLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sqlStr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sqlstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sqlstr().data(), this->sqlstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Insert_SystemLog.sqlStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Insert_SystemLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Insert_SystemLog)
  return false;
#undef DO_
}

void Insert_SystemLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Insert_SystemLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sqlStr = 1;
  if (this->sqlstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sqlstr().data(), this->sqlstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Insert_SystemLog.sqlStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sqlstr(), output);
  }

  // bool result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:Insert_SystemLog)
}

size_t Insert_SystemLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Insert_SystemLog)
  size_t total_size = 0;

  // string sqlStr = 1;
  if (this->sqlstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sqlstr());
  }

  // bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Insert_SystemLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Insert_SystemLog*>(&from));
}

void Insert_SystemLog::MergeFrom(const Insert_SystemLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Insert_SystemLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sqlstr().size() > 0) {

    sqlstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sqlstr_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Insert_SystemLog::CopyFrom(const Insert_SystemLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Insert_SystemLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Insert_SystemLog::IsInitialized() const {
  return true;
}

void Insert_SystemLog::Swap(Insert_SystemLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Insert_SystemLog::InternalSwap(Insert_SystemLog* other) {
  sqlstr_.Swap(&other->sqlstr_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Insert_SystemLog::GetTypeName() const {
  return "Insert_SystemLog";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Insert_SystemLog

// string sqlStr = 1;
void Insert_SystemLog::clear_sqlstr() {
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Insert_SystemLog::sqlstr() const {
  // @@protoc_insertion_point(field_get:Insert_SystemLog.sqlStr)
  return sqlstr_.GetNoArena();
}
void Insert_SystemLog::set_sqlstr(const ::std::string& value) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Insert_SystemLog.sqlStr)
}
#if LANG_CXX11
void Insert_SystemLog::set_sqlstr(::std::string&& value) {
  
  sqlstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Insert_SystemLog.sqlStr)
}
#endif
void Insert_SystemLog::set_sqlstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Insert_SystemLog.sqlStr)
}
void Insert_SystemLog::set_sqlstr(const char* value, size_t size) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Insert_SystemLog.sqlStr)
}
::std::string* Insert_SystemLog::mutable_sqlstr() {
  
  // @@protoc_insertion_point(field_mutable:Insert_SystemLog.sqlStr)
  return sqlstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Insert_SystemLog::release_sqlstr() {
  // @@protoc_insertion_point(field_release:Insert_SystemLog.sqlStr)
  
  return sqlstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Insert_SystemLog::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr != NULL) {
    
  } else {
    
  }
  sqlstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqlstr);
  // @@protoc_insertion_point(field_set_allocated:Insert_SystemLog.sqlStr)
}

// bool result = 2;
void Insert_SystemLog::clear_result() {
  result_ = false;
}
bool Insert_SystemLog::result() const {
  // @@protoc_insertion_point(field_get:Insert_SystemLog.result)
  return result_;
}
void Insert_SystemLog::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Insert_SystemLog.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainMessage::kMsgTypeFieldNumber;
const int MainMessage::kCollectDataFieldNumber;
const int MainMessage::kHeartBeatMessageFieldNumber;
const int MainMessage::kMysqlOperDataFieldNumber;
const int MainMessage::kInsertSystemLogFieldNumber;
const int MainMessage::kAgentCtrlFieldNumber;
const int MainMessage::kParamModifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMessage::MainMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ServerMonitor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainMessage)
}
MainMessage::MainMessage(const MainMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_collectdata()) {
    collectdata_ = new ::CollectData(*from.collectdata_);
  } else {
    collectdata_ = NULL;
  }
  if (from.has_heartbeatmessage()) {
    heartbeatmessage_ = new ::HeartBeatMessage(*from.heartbeatmessage_);
  } else {
    heartbeatmessage_ = NULL;
  }
  if (from.has_mysqloperdata()) {
    mysqloperdata_ = new ::MysqlOperData(*from.mysqloperdata_);
  } else {
    mysqloperdata_ = NULL;
  }
  if (from.has_insert_systemlog()) {
    insert_systemlog_ = new ::Insert_SystemLog(*from.insert_systemlog_);
  } else {
    insert_systemlog_ = NULL;
  }
  if (from.has_agentctrl()) {
    agentctrl_ = new ::AgentCtrl(*from.agentctrl_);
  } else {
    agentctrl_ = NULL;
  }
  if (from.has_parammodify()) {
    parammodify_ = new ::ParamModify(*from.parammodify_);
  } else {
    parammodify_ = NULL;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:MainMessage)
}

void MainMessage::SharedCtor() {
  ::memset(&collectdata_, 0, reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&collectdata_) + sizeof(msgtype_));
  _cached_size_ = 0;
}

MainMessage::~MainMessage() {
  // @@protoc_insertion_point(destructor:MainMessage)
  SharedDtor();
}

void MainMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete collectdata_;
  }
  if (this != internal_default_instance()) {
    delete heartbeatmessage_;
  }
  if (this != internal_default_instance()) {
    delete mysqloperdata_;
  }
  if (this != internal_default_instance()) {
    delete insert_systemlog_;
  }
  if (this != internal_default_instance()) {
    delete agentctrl_;
  }
  if (this != internal_default_instance()) {
    delete parammodify_;
  }
}

void MainMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MainMessage& MainMessage::default_instance() {
  protobuf_ServerMonitor_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainMessage* MainMessage::New(::google::protobuf::Arena* arena) const {
  MainMessage* n = new MainMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MainMessage)
  if (GetArenaNoVirtual() == NULL && collectdata_ != NULL) {
    delete collectdata_;
  }
  collectdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) {
    delete heartbeatmessage_;
  }
  heartbeatmessage_ = NULL;
  if (GetArenaNoVirtual() == NULL && mysqloperdata_ != NULL) {
    delete mysqloperdata_;
  }
  mysqloperdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && insert_systemlog_ != NULL) {
    delete insert_systemlog_;
  }
  insert_systemlog_ = NULL;
  if (GetArenaNoVirtual() == NULL && agentctrl_ != NULL) {
    delete agentctrl_;
  }
  agentctrl_ = NULL;
  if (GetArenaNoVirtual() == NULL && parammodify_ != NULL) {
    delete parammodify_;
  }
  parammodify_ = NULL;
  msgtype_ = 0;
}

bool MainMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MessageType msgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CollectData collectData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collectdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HeartBeatMessage heartBeatMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeatmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MysqlOperData mysqlOperData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysqloperdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Insert_SystemLog insert_SystemLog = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert_systemlog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AgentCtrl agentCtrl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agentctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ParamModify paramModify = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parammodify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainMessage)
  return false;
#undef DO_
}

void MainMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType msgType = 1;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // .CollectData collectData = 2;
  if (this->has_collectdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->collectdata_, output);
  }

  // .HeartBeatMessage heartBeatMessage = 3;
  if (this->has_heartbeatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->heartbeatmessage_, output);
  }

  // .MysqlOperData mysqlOperData = 4;
  if (this->has_mysqloperdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->mysqloperdata_, output);
  }

  // .Insert_SystemLog insert_SystemLog = 5;
  if (this->has_insert_systemlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->insert_systemlog_, output);
  }

  // .AgentCtrl agentCtrl = 6;
  if (this->has_agentctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->agentctrl_, output);
  }

  // .ParamModify paramModify = 7;
  if (this->has_parammodify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->parammodify_, output);
  }

  // @@protoc_insertion_point(serialize_end:MainMessage)
}

size_t MainMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MainMessage)
  size_t total_size = 0;

  // .CollectData collectData = 2;
  if (this->has_collectdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->collectdata_);
  }

  // .HeartBeatMessage heartBeatMessage = 3;
  if (this->has_heartbeatmessage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeatmessage_);
  }

  // .MysqlOperData mysqlOperData = 4;
  if (this->has_mysqloperdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mysqloperdata_);
  }

  // .Insert_SystemLog insert_SystemLog = 5;
  if (this->has_insert_systemlog()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->insert_systemlog_);
  }

  // .AgentCtrl agentCtrl = 6;
  if (this->has_agentctrl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->agentctrl_);
  }

  // .ParamModify paramModify = 7;
  if (this->has_parammodify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parammodify_);
  }

  // .MessageType msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MainMessage*>(&from));
}

void MainMessage::MergeFrom(const MainMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MainMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_collectdata()) {
    mutable_collectdata()->::CollectData::MergeFrom(from.collectdata());
  }
  if (from.has_heartbeatmessage()) {
    mutable_heartbeatmessage()->::HeartBeatMessage::MergeFrom(from.heartbeatmessage());
  }
  if (from.has_mysqloperdata()) {
    mutable_mysqloperdata()->::MysqlOperData::MergeFrom(from.mysqloperdata());
  }
  if (from.has_insert_systemlog()) {
    mutable_insert_systemlog()->::Insert_SystemLog::MergeFrom(from.insert_systemlog());
  }
  if (from.has_agentctrl()) {
    mutable_agentctrl()->::AgentCtrl::MergeFrom(from.agentctrl());
  }
  if (from.has_parammodify()) {
    mutable_parammodify()->::ParamModify::MergeFrom(from.parammodify());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void MainMessage::CopyFrom(const MainMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MainMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMessage::IsInitialized() const {
  return true;
}

void MainMessage::Swap(MainMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMessage::InternalSwap(MainMessage* other) {
  std::swap(collectdata_, other->collectdata_);
  std::swap(heartbeatmessage_, other->heartbeatmessage_);
  std::swap(mysqloperdata_, other->mysqloperdata_);
  std::swap(insert_systemlog_, other->insert_systemlog_);
  std::swap(agentctrl_, other->agentctrl_);
  std::swap(parammodify_, other->parammodify_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MainMessage::GetTypeName() const {
  return "MainMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainMessage

// .MessageType msgType = 1;
void MainMessage::clear_msgtype() {
  msgtype_ = 0;
}
::MessageType MainMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:MainMessage.msgType)
  return static_cast< ::MessageType >(msgtype_);
}
void MainMessage::set_msgtype(::MessageType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MainMessage.msgType)
}

// .CollectData collectData = 2;
bool MainMessage::has_collectdata() const {
  return this != internal_default_instance() && collectdata_ != NULL;
}
void MainMessage::clear_collectdata() {
  if (GetArenaNoVirtual() == NULL && collectdata_ != NULL) delete collectdata_;
  collectdata_ = NULL;
}
const ::CollectData& MainMessage::collectdata() const {
  // @@protoc_insertion_point(field_get:MainMessage.collectData)
  return collectdata_ != NULL ? *collectdata_
                         : *::CollectData::internal_default_instance();
}
::CollectData* MainMessage::mutable_collectdata() {
  
  if (collectdata_ == NULL) {
    collectdata_ = new ::CollectData;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.collectData)
  return collectdata_;
}
::CollectData* MainMessage::release_collectdata() {
  // @@protoc_insertion_point(field_release:MainMessage.collectData)
  
  ::CollectData* temp = collectdata_;
  collectdata_ = NULL;
  return temp;
}
void MainMessage::set_allocated_collectdata(::CollectData* collectdata) {
  delete collectdata_;
  collectdata_ = collectdata;
  if (collectdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.collectData)
}

// .HeartBeatMessage heartBeatMessage = 3;
bool MainMessage::has_heartbeatmessage() const {
  return this != internal_default_instance() && heartbeatmessage_ != NULL;
}
void MainMessage::clear_heartbeatmessage() {
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) delete heartbeatmessage_;
  heartbeatmessage_ = NULL;
}
const ::HeartBeatMessage& MainMessage::heartbeatmessage() const {
  // @@protoc_insertion_point(field_get:MainMessage.heartBeatMessage)
  return heartbeatmessage_ != NULL ? *heartbeatmessage_
                         : *::HeartBeatMessage::internal_default_instance();
}
::HeartBeatMessage* MainMessage::mutable_heartbeatmessage() {
  
  if (heartbeatmessage_ == NULL) {
    heartbeatmessage_ = new ::HeartBeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.heartBeatMessage)
  return heartbeatmessage_;
}
::HeartBeatMessage* MainMessage::release_heartbeatmessage() {
  // @@protoc_insertion_point(field_release:MainMessage.heartBeatMessage)
  
  ::HeartBeatMessage* temp = heartbeatmessage_;
  heartbeatmessage_ = NULL;
  return temp;
}
void MainMessage::set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage) {
  delete heartbeatmessage_;
  heartbeatmessage_ = heartbeatmessage;
  if (heartbeatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.heartBeatMessage)
}

// .MysqlOperData mysqlOperData = 4;
bool MainMessage::has_mysqloperdata() const {
  return this != internal_default_instance() && mysqloperdata_ != NULL;
}
void MainMessage::clear_mysqloperdata() {
  if (GetArenaNoVirtual() == NULL && mysqloperdata_ != NULL) delete mysqloperdata_;
  mysqloperdata_ = NULL;
}
const ::MysqlOperData& MainMessage::mysqloperdata() const {
  // @@protoc_insertion_point(field_get:MainMessage.mysqlOperData)
  return mysqloperdata_ != NULL ? *mysqloperdata_
                         : *::MysqlOperData::internal_default_instance();
}
::MysqlOperData* MainMessage::mutable_mysqloperdata() {
  
  if (mysqloperdata_ == NULL) {
    mysqloperdata_ = new ::MysqlOperData;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.mysqlOperData)
  return mysqloperdata_;
}
::MysqlOperData* MainMessage::release_mysqloperdata() {
  // @@protoc_insertion_point(field_release:MainMessage.mysqlOperData)
  
  ::MysqlOperData* temp = mysqloperdata_;
  mysqloperdata_ = NULL;
  return temp;
}
void MainMessage::set_allocated_mysqloperdata(::MysqlOperData* mysqloperdata) {
  delete mysqloperdata_;
  mysqloperdata_ = mysqloperdata;
  if (mysqloperdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.mysqlOperData)
}

// .Insert_SystemLog insert_SystemLog = 5;
bool MainMessage::has_insert_systemlog() const {
  return this != internal_default_instance() && insert_systemlog_ != NULL;
}
void MainMessage::clear_insert_systemlog() {
  if (GetArenaNoVirtual() == NULL && insert_systemlog_ != NULL) delete insert_systemlog_;
  insert_systemlog_ = NULL;
}
const ::Insert_SystemLog& MainMessage::insert_systemlog() const {
  // @@protoc_insertion_point(field_get:MainMessage.insert_SystemLog)
  return insert_systemlog_ != NULL ? *insert_systemlog_
                         : *::Insert_SystemLog::internal_default_instance();
}
::Insert_SystemLog* MainMessage::mutable_insert_systemlog() {
  
  if (insert_systemlog_ == NULL) {
    insert_systemlog_ = new ::Insert_SystemLog;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.insert_SystemLog)
  return insert_systemlog_;
}
::Insert_SystemLog* MainMessage::release_insert_systemlog() {
  // @@protoc_insertion_point(field_release:MainMessage.insert_SystemLog)
  
  ::Insert_SystemLog* temp = insert_systemlog_;
  insert_systemlog_ = NULL;
  return temp;
}
void MainMessage::set_allocated_insert_systemlog(::Insert_SystemLog* insert_systemlog) {
  delete insert_systemlog_;
  insert_systemlog_ = insert_systemlog;
  if (insert_systemlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.insert_SystemLog)
}

// .AgentCtrl agentCtrl = 6;
bool MainMessage::has_agentctrl() const {
  return this != internal_default_instance() && agentctrl_ != NULL;
}
void MainMessage::clear_agentctrl() {
  if (GetArenaNoVirtual() == NULL && agentctrl_ != NULL) delete agentctrl_;
  agentctrl_ = NULL;
}
const ::AgentCtrl& MainMessage::agentctrl() const {
  // @@protoc_insertion_point(field_get:MainMessage.agentCtrl)
  return agentctrl_ != NULL ? *agentctrl_
                         : *::AgentCtrl::internal_default_instance();
}
::AgentCtrl* MainMessage::mutable_agentctrl() {
  
  if (agentctrl_ == NULL) {
    agentctrl_ = new ::AgentCtrl;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.agentCtrl)
  return agentctrl_;
}
::AgentCtrl* MainMessage::release_agentctrl() {
  // @@protoc_insertion_point(field_release:MainMessage.agentCtrl)
  
  ::AgentCtrl* temp = agentctrl_;
  agentctrl_ = NULL;
  return temp;
}
void MainMessage::set_allocated_agentctrl(::AgentCtrl* agentctrl) {
  delete agentctrl_;
  agentctrl_ = agentctrl;
  if (agentctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.agentCtrl)
}

// .ParamModify paramModify = 7;
bool MainMessage::has_parammodify() const {
  return this != internal_default_instance() && parammodify_ != NULL;
}
void MainMessage::clear_parammodify() {
  if (GetArenaNoVirtual() == NULL && parammodify_ != NULL) delete parammodify_;
  parammodify_ = NULL;
}
const ::ParamModify& MainMessage::parammodify() const {
  // @@protoc_insertion_point(field_get:MainMessage.paramModify)
  return parammodify_ != NULL ? *parammodify_
                         : *::ParamModify::internal_default_instance();
}
::ParamModify* MainMessage::mutable_parammodify() {
  
  if (parammodify_ == NULL) {
    parammodify_ = new ::ParamModify;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.paramModify)
  return parammodify_;
}
::ParamModify* MainMessage::release_parammodify() {
  // @@protoc_insertion_point(field_release:MainMessage.paramModify)
  
  ::ParamModify* temp = parammodify_;
  parammodify_ = NULL;
  return temp;
}
void MainMessage::set_allocated_parammodify(::ParamModify* parammodify) {
  delete parammodify_;
  parammodify_ = parammodify;
  if (parammodify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.paramModify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
