// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMonitor.proto

#ifndef PROTOBUF_ServerMonitor_2eproto__INCLUDED
#define PROTOBUF_ServerMonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class AgentCtrl;
class AgentCtrlDefaultTypeInternal;
extern AgentCtrlDefaultTypeInternal _AgentCtrl_default_instance_;
class CollectData;
class CollectDataDefaultTypeInternal;
extern CollectDataDefaultTypeInternal _CollectData_default_instance_;
class HeartBeatMessage;
class HeartBeatMessageDefaultTypeInternal;
extern HeartBeatMessageDefaultTypeInternal _HeartBeatMessage_default_instance_;
class Insert_SystemLog;
class Insert_SystemLogDefaultTypeInternal;
extern Insert_SystemLogDefaultTypeInternal _Insert_SystemLog_default_instance_;
class MainMessage;
class MainMessageDefaultTypeInternal;
extern MainMessageDefaultTypeInternal _MainMessage_default_instance_;
class MysqlOperData;
class MysqlOperDataDefaultTypeInternal;
extern MysqlOperDataDefaultTypeInternal _MysqlOperData_default_instance_;
class MysqlOperUnit;
class MysqlOperUnitDefaultTypeInternal;
extern MysqlOperUnitDefaultTypeInternal _MysqlOperUnit_default_instance_;

namespace protobuf_ServerMonitor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ServerMonitor_2eproto

enum AgentCtrlType {
  ACT_INVALID = 0,
  ACT_START = 1,
  ACT_END = 2,
  AgentCtrlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AgentCtrlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AgentCtrlType_IsValid(int value);
const AgentCtrlType AgentCtrlType_MIN = ACT_INVALID;
const AgentCtrlType AgentCtrlType_MAX = ACT_END;
const int AgentCtrlType_ARRAYSIZE = AgentCtrlType_MAX + 1;

enum MysqlOperType {
  MOT_INVALID = 0,
  MOT_INSERT_UPDATE_DEL = 1,
  MOT_SELECT = 2,
  MysqlOperType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MysqlOperType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MysqlOperType_IsValid(int value);
const MysqlOperType MysqlOperType_MIN = MOT_INVALID;
const MysqlOperType MysqlOperType_MAX = MOT_SELECT;
const int MysqlOperType_ARRAYSIZE = MysqlOperType_MAX + 1;

enum MessageType {
  MT_INVALID = 0,
  MT_CollectData = 1,
  MT_HeartBeatMessage = 2,
  MT_MysqlOperData = 3,
  MT_Insert_SystemLog = 4,
  MT_AgentCtrl = 5,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MT_INVALID;
const MessageType MessageType_MAX = MT_AgentCtrl;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

// ===================================================================

class HeartBeatMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:HeartBeatMessage) */ {
 public:
  HeartBeatMessage();
  virtual ~HeartBeatMessage();

  HeartBeatMessage(const HeartBeatMessage& from);

  inline HeartBeatMessage& operator=(const HeartBeatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const HeartBeatMessage& default_instance();

  static inline const HeartBeatMessage* internal_default_instance() {
    return reinterpret_cast<const HeartBeatMessage*>(
               &_HeartBeatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HeartBeatMessage* other);

  // implements Message ----------------------------------------------

  inline HeartBeatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatMessage& from);
  void MergeFrom(const HeartBeatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipAddr = 1;
  void clear_ipaddr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ipaddr() const;
  void set_ipaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddr(::std::string&& value);
  #endif
  void set_ipaddr(const char* value);
  void set_ipaddr(const char* value, size_t size);
  ::std::string* mutable_ipaddr();
  ::std::string* release_ipaddr();
  void set_allocated_ipaddr(::std::string* ipaddr);

  // string devId = 3;
  void clear_devid();
  static const int kDevIdFieldNumber = 3;
  const ::std::string& devid() const;
  void set_devid(const ::std::string& value);
  #if LANG_CXX11
  void set_devid(::std::string&& value);
  #endif
  void set_devid(const char* value);
  void set_devid(const char* value, size_t size);
  ::std::string* mutable_devid();
  ::std::string* release_devid();
  void set_allocated_devid(::std::string* devid);

  // string monitorPath = 4;
  void clear_monitorpath();
  static const int kMonitorPathFieldNumber = 4;
  const ::std::string& monitorpath() const;
  void set_monitorpath(const ::std::string& value);
  #if LANG_CXX11
  void set_monitorpath(::std::string&& value);
  #endif
  void set_monitorpath(const char* value);
  void set_monitorpath(const char* value, size_t size);
  ::std::string* mutable_monitorpath();
  ::std::string* release_monitorpath();
  void set_allocated_monitorpath(::std::string* monitorpath);

  // int32 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 func_file = 5;
  void clear_func_file();
  static const int kFuncFileFieldNumber = 5;
  ::google::protobuf::int32 func_file() const;
  void set_func_file(::google::protobuf::int32 value);

  // int32 func_process = 6;
  void clear_func_process();
  static const int kFuncProcessFieldNumber = 6;
  ::google::protobuf::int32 func_process() const;
  void set_func_process(::google::protobuf::int32 value);

  // int32 func_port = 7;
  void clear_func_port();
  static const int kFuncPortFieldNumber = 7;
  ::google::protobuf::int32 func_port() const;
  void set_func_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HeartBeatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddr_;
  ::google::protobuf::internal::ArenaStringPtr devid_;
  ::google::protobuf::internal::ArenaStringPtr monitorpath_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 func_file_;
  ::google::protobuf::int32 func_process_;
  ::google::protobuf::int32 func_port_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CollectData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CollectData) */ {
 public:
  CollectData();
  virtual ~CollectData();

  CollectData(const CollectData& from);

  inline CollectData& operator=(const CollectData& from) {
    CopyFrom(from);
    return *this;
  }

  static const CollectData& default_instance();

  static inline const CollectData* internal_default_instance() {
    return reinterpret_cast<const CollectData*>(
               &_CollectData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CollectData* other);

  // implements Message ----------------------------------------------

  inline CollectData* New() const PROTOBUF_FINAL { return New(NULL); }

  CollectData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CollectData& from);
  void MergeFrom(const CollectData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CollectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string devId = 1;
  void clear_devid();
  static const int kDevIdFieldNumber = 1;
  const ::std::string& devid() const;
  void set_devid(const ::std::string& value);
  #if LANG_CXX11
  void set_devid(::std::string&& value);
  #endif
  void set_devid(const char* value);
  void set_devid(const char* value, size_t size);
  ::std::string* mutable_devid();
  ::std::string* release_devid();
  void set_allocated_devid(::std::string* devid);

  // string filePath = 2;
  void clear_filepath();
  static const int kFilePathFieldNumber = 2;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // string state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:CollectData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devid_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgentCtrl : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:AgentCtrl) */ {
 public:
  AgentCtrl();
  virtual ~AgentCtrl();

  AgentCtrl(const AgentCtrl& from);

  inline AgentCtrl& operator=(const AgentCtrl& from) {
    CopyFrom(from);
    return *this;
  }

  static const AgentCtrl& default_instance();

  static inline const AgentCtrl* internal_default_instance() {
    return reinterpret_cast<const AgentCtrl*>(
               &_AgentCtrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AgentCtrl* other);

  // implements Message ----------------------------------------------

  inline AgentCtrl* New() const PROTOBUF_FINAL { return New(NULL); }

  AgentCtrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AgentCtrl& from);
  void MergeFrom(const AgentCtrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AgentCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipAddr = 1;
  void clear_ipaddr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ipaddr() const;
  void set_ipaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddr(::std::string&& value);
  #endif
  void set_ipaddr(const char* value);
  void set_ipaddr(const char* value, size_t size);
  ::std::string* mutable_ipaddr();
  ::std::string* release_ipaddr();
  void set_allocated_ipaddr(::std::string* ipaddr);

  // .AgentCtrlType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::AgentCtrlType type() const;
  void set_type(::AgentCtrlType value);

  // @@protoc_insertion_point(class_scope:AgentCtrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddr_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MysqlOperUnit : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:MysqlOperUnit) */ {
 public:
  MysqlOperUnit();
  virtual ~MysqlOperUnit();

  MysqlOperUnit(const MysqlOperUnit& from);

  inline MysqlOperUnit& operator=(const MysqlOperUnit& from) {
    CopyFrom(from);
    return *this;
  }

  static const MysqlOperUnit& default_instance();

  static inline const MysqlOperUnit* internal_default_instance() {
    return reinterpret_cast<const MysqlOperUnit*>(
               &_MysqlOperUnit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MysqlOperUnit* other);

  // implements Message ----------------------------------------------

  inline MysqlOperUnit* New() const PROTOBUF_FINAL { return New(NULL); }

  MysqlOperUnit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MysqlOperUnit& from);
  void MergeFrom(const MysqlOperUnit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MysqlOperUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requltList = 6;
  int requltlist_size() const;
  void clear_requltlist();
  static const int kRequltListFieldNumber = 6;
  const ::std::string& requltlist(int index) const;
  ::std::string* mutable_requltlist(int index);
  void set_requltlist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requltlist(int index, ::std::string&& value);
  #endif
  void set_requltlist(int index, const char* value);
  void set_requltlist(int index, const char* value, size_t size);
  ::std::string* add_requltlist();
  void add_requltlist(const ::std::string& value);
  #if LANG_CXX11
  void add_requltlist(::std::string&& value);
  #endif
  void add_requltlist(const char* value);
  void add_requltlist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requltlist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requltlist();

  // string operDesc = 2;
  void clear_operdesc();
  static const int kOperDescFieldNumber = 2;
  const ::std::string& operdesc() const;
  void set_operdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_operdesc(::std::string&& value);
  #endif
  void set_operdesc(const char* value);
  void set_operdesc(const char* value, size_t size);
  ::std::string* mutable_operdesc();
  ::std::string* release_operdesc();
  void set_allocated_operdesc(::std::string* operdesc);

  // string sqlStr = 3;
  void clear_sqlstr();
  static const int kSqlStrFieldNumber = 3;
  const ::std::string& sqlstr() const;
  void set_sqlstr(const ::std::string& value);
  #if LANG_CXX11
  void set_sqlstr(::std::string&& value);
  #endif
  void set_sqlstr(const char* value);
  void set_sqlstr(const char* value, size_t size);
  ::std::string* mutable_sqlstr();
  ::std::string* release_sqlstr();
  void set_allocated_sqlstr(::std::string* sqlstr);

  // string sqlLogType = 4;
  void clear_sqllogtype();
  static const int kSqlLogTypeFieldNumber = 4;
  const ::std::string& sqllogtype() const;
  void set_sqllogtype(const ::std::string& value);
  #if LANG_CXX11
  void set_sqllogtype(::std::string&& value);
  #endif
  void set_sqllogtype(const char* value);
  void set_sqllogtype(const char* value, size_t size);
  ::std::string* mutable_sqllogtype();
  ::std::string* release_sqllogtype();
  void set_allocated_sqllogtype(::std::string* sqllogtype);

  // .MysqlOperType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::MysqlOperType type() const;
  void set_type(::MysqlOperType value);

  // bool operFlag = 5;
  void clear_operflag();
  static const int kOperFlagFieldNumber = 5;
  bool operflag() const;
  void set_operflag(bool value);

  // @@protoc_insertion_point(class_scope:MysqlOperUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requltlist_;
  ::google::protobuf::internal::ArenaStringPtr operdesc_;
  ::google::protobuf::internal::ArenaStringPtr sqlstr_;
  ::google::protobuf::internal::ArenaStringPtr sqllogtype_;
  int type_;
  bool operflag_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MysqlOperData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:MysqlOperData) */ {
 public:
  MysqlOperData();
  virtual ~MysqlOperData();

  MysqlOperData(const MysqlOperData& from);

  inline MysqlOperData& operator=(const MysqlOperData& from) {
    CopyFrom(from);
    return *this;
  }

  static const MysqlOperData& default_instance();

  static inline const MysqlOperData* internal_default_instance() {
    return reinterpret_cast<const MysqlOperData*>(
               &_MysqlOperData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MysqlOperData* other);

  // implements Message ----------------------------------------------

  inline MysqlOperData* New() const PROTOBUF_FINAL { return New(NULL); }

  MysqlOperData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MysqlOperData& from);
  void MergeFrom(const MysqlOperData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MysqlOperData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MysqlOperUnit operUnit = 3;
  int operunit_size() const;
  void clear_operunit();
  static const int kOperUnitFieldNumber = 3;
  const ::MysqlOperUnit& operunit(int index) const;
  ::MysqlOperUnit* mutable_operunit(int index);
  ::MysqlOperUnit* add_operunit();
  ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >*
      mutable_operunit();
  const ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >&
      operunit() const;

  // string funcId = 1;
  void clear_funcid();
  static const int kFuncIdFieldNumber = 1;
  const ::std::string& funcid() const;
  void set_funcid(const ::std::string& value);
  #if LANG_CXX11
  void set_funcid(::std::string&& value);
  #endif
  void set_funcid(const char* value);
  void set_funcid(const char* value, size_t size);
  ::std::string* mutable_funcid();
  ::std::string* release_funcid();
  void set_allocated_funcid(::std::string* funcid);

  // string assetId = 2;
  void clear_assetid();
  static const int kAssetIdFieldNumber = 2;
  const ::std::string& assetid() const;
  void set_assetid(const ::std::string& value);
  #if LANG_CXX11
  void set_assetid(::std::string&& value);
  #endif
  void set_assetid(const char* value);
  void set_assetid(const char* value, size_t size);
  ::std::string* mutable_assetid();
  ::std::string* release_assetid();
  void set_allocated_assetid(::std::string* assetid);

  // string userName = 4;
  void clear_username();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string roleName = 5;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 5;
  const ::std::string& rolename() const;
  void set_rolename(const ::std::string& value);
  #if LANG_CXX11
  void set_rolename(::std::string&& value);
  #endif
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  ::std::string* mutable_rolename();
  ::std::string* release_rolename();
  void set_allocated_rolename(::std::string* rolename);

  // string loginAddr = 6;
  void clear_loginaddr();
  static const int kLoginAddrFieldNumber = 6;
  const ::std::string& loginaddr() const;
  void set_loginaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_loginaddr(::std::string&& value);
  #endif
  void set_loginaddr(const char* value);
  void set_loginaddr(const char* value, size_t size);
  ::std::string* mutable_loginaddr();
  ::std::string* release_loginaddr();
  void set_allocated_loginaddr(::std::string* loginaddr);

  // @@protoc_insertion_point(class_scope:MysqlOperData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit > operunit_;
  ::google::protobuf::internal::ArenaStringPtr funcid_;
  ::google::protobuf::internal::ArenaStringPtr assetid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::internal::ArenaStringPtr loginaddr_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Insert_SystemLog : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Insert_SystemLog) */ {
 public:
  Insert_SystemLog();
  virtual ~Insert_SystemLog();

  Insert_SystemLog(const Insert_SystemLog& from);

  inline Insert_SystemLog& operator=(const Insert_SystemLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const Insert_SystemLog& default_instance();

  static inline const Insert_SystemLog* internal_default_instance() {
    return reinterpret_cast<const Insert_SystemLog*>(
               &_Insert_SystemLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Insert_SystemLog* other);

  // implements Message ----------------------------------------------

  inline Insert_SystemLog* New() const PROTOBUF_FINAL { return New(NULL); }

  Insert_SystemLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Insert_SystemLog& from);
  void MergeFrom(const Insert_SystemLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Insert_SystemLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sqlStr = 1;
  void clear_sqlstr();
  static const int kSqlStrFieldNumber = 1;
  const ::std::string& sqlstr() const;
  void set_sqlstr(const ::std::string& value);
  #if LANG_CXX11
  void set_sqlstr(::std::string&& value);
  #endif
  void set_sqlstr(const char* value);
  void set_sqlstr(const char* value, size_t size);
  ::std::string* mutable_sqlstr();
  ::std::string* release_sqlstr();
  void set_allocated_sqlstr(::std::string* sqlstr);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Insert_SystemLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sqlstr_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MainMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:MainMessage) */ {
 public:
  MainMessage();
  virtual ~MainMessage();

  MainMessage(const MainMessage& from);

  inline MainMessage& operator=(const MainMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const MainMessage& default_instance();

  static inline const MainMessage* internal_default_instance() {
    return reinterpret_cast<const MainMessage*>(
               &_MainMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MainMessage* other);

  // implements Message ----------------------------------------------

  inline MainMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  MainMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MainMessage& from);
  void MergeFrom(const MainMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MainMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CollectData collectData = 2;
  bool has_collectdata() const;
  void clear_collectdata();
  static const int kCollectDataFieldNumber = 2;
  const ::CollectData& collectdata() const;
  ::CollectData* mutable_collectdata();
  ::CollectData* release_collectdata();
  void set_allocated_collectdata(::CollectData* collectdata);

  // .HeartBeatMessage heartBeatMessage = 3;
  bool has_heartbeatmessage() const;
  void clear_heartbeatmessage();
  static const int kHeartBeatMessageFieldNumber = 3;
  const ::HeartBeatMessage& heartbeatmessage() const;
  ::HeartBeatMessage* mutable_heartbeatmessage();
  ::HeartBeatMessage* release_heartbeatmessage();
  void set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage);

  // .MysqlOperData mysqlOperData = 4;
  bool has_mysqloperdata() const;
  void clear_mysqloperdata();
  static const int kMysqlOperDataFieldNumber = 4;
  const ::MysqlOperData& mysqloperdata() const;
  ::MysqlOperData* mutable_mysqloperdata();
  ::MysqlOperData* release_mysqloperdata();
  void set_allocated_mysqloperdata(::MysqlOperData* mysqloperdata);

  // .Insert_SystemLog insert_SystemLog = 5;
  bool has_insert_systemlog() const;
  void clear_insert_systemlog();
  static const int kInsertSystemLogFieldNumber = 5;
  const ::Insert_SystemLog& insert_systemlog() const;
  ::Insert_SystemLog* mutable_insert_systemlog();
  ::Insert_SystemLog* release_insert_systemlog();
  void set_allocated_insert_systemlog(::Insert_SystemLog* insert_systemlog);

  // .AgentCtrl agentCtrl = 6;
  bool has_agentctrl() const;
  void clear_agentctrl();
  static const int kAgentCtrlFieldNumber = 6;
  const ::AgentCtrl& agentctrl() const;
  ::AgentCtrl* mutable_agentctrl();
  ::AgentCtrl* release_agentctrl();
  void set_allocated_agentctrl(::AgentCtrl* agentctrl);

  // .MessageType msgType = 1;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  ::MessageType msgtype() const;
  void set_msgtype(::MessageType value);

  // @@protoc_insertion_point(class_scope:MainMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::CollectData* collectdata_;
  ::HeartBeatMessage* heartbeatmessage_;
  ::MysqlOperData* mysqloperdata_;
  ::Insert_SystemLog* insert_systemlog_;
  ::AgentCtrl* agentctrl_;
  int msgtype_;
  mutable int _cached_size_;
  friend struct protobuf_ServerMonitor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatMessage

// string ipAddr = 1;
inline void HeartBeatMessage::clear_ipaddr() {
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatMessage::ipaddr() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.ipAddr)
  return ipaddr_.GetNoArena();
}
inline void HeartBeatMessage::set_ipaddr(const ::std::string& value) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.ipAddr)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_ipaddr(::std::string&& value) {
  
  ipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.ipAddr)
}
#endif
inline void HeartBeatMessage::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.ipAddr)
}
inline void HeartBeatMessage::set_ipaddr(const char* value, size_t size) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.ipAddr)
}
inline ::std::string* HeartBeatMessage::mutable_ipaddr() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.ipAddr)
  return ipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_ipaddr() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.ipAddr)
  
  return ipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_ipaddr(::std::string* ipaddr) {
  if (ipaddr != NULL) {
    
  } else {
    
  }
  ipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddr);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.ipAddr)
}

// int32 time = 2;
inline void HeartBeatMessage::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 HeartBeatMessage::time() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.time)
  return time_;
}
inline void HeartBeatMessage::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.time)
}

// string devId = 3;
inline void HeartBeatMessage::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatMessage::devid() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.devId)
  return devid_.GetNoArena();
}
inline void HeartBeatMessage::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.devId)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.devId)
}
#endif
inline void HeartBeatMessage::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.devId)
}
inline void HeartBeatMessage::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.devId)
}
inline ::std::string* HeartBeatMessage::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_devid() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.devId)
}

// string monitorPath = 4;
inline void HeartBeatMessage::clear_monitorpath() {
  monitorpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatMessage::monitorpath() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.monitorPath)
  return monitorpath_.GetNoArena();
}
inline void HeartBeatMessage::set_monitorpath(const ::std::string& value) {
  
  monitorpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatMessage.monitorPath)
}
#if LANG_CXX11
inline void HeartBeatMessage::set_monitorpath(::std::string&& value) {
  
  monitorpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatMessage.monitorPath)
}
#endif
inline void HeartBeatMessage::set_monitorpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitorpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatMessage.monitorPath)
}
inline void HeartBeatMessage::set_monitorpath(const char* value, size_t size) {
  
  monitorpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatMessage.monitorPath)
}
inline ::std::string* HeartBeatMessage::mutable_monitorpath() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeatMessage.monitorPath)
  return monitorpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatMessage::release_monitorpath() {
  // @@protoc_insertion_point(field_release:HeartBeatMessage.monitorPath)
  
  return monitorpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMessage::set_allocated_monitorpath(::std::string* monitorpath) {
  if (monitorpath != NULL) {
    
  } else {
    
  }
  monitorpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitorpath);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatMessage.monitorPath)
}

// int32 func_file = 5;
inline void HeartBeatMessage::clear_func_file() {
  func_file_ = 0;
}
inline ::google::protobuf::int32 HeartBeatMessage::func_file() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.func_file)
  return func_file_;
}
inline void HeartBeatMessage::set_func_file(::google::protobuf::int32 value) {
  
  func_file_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.func_file)
}

// int32 func_process = 6;
inline void HeartBeatMessage::clear_func_process() {
  func_process_ = 0;
}
inline ::google::protobuf::int32 HeartBeatMessage::func_process() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.func_process)
  return func_process_;
}
inline void HeartBeatMessage::set_func_process(::google::protobuf::int32 value) {
  
  func_process_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.func_process)
}

// int32 func_port = 7;
inline void HeartBeatMessage::clear_func_port() {
  func_port_ = 0;
}
inline ::google::protobuf::int32 HeartBeatMessage::func_port() const {
  // @@protoc_insertion_point(field_get:HeartBeatMessage.func_port)
  return func_port_;
}
inline void HeartBeatMessage::set_func_port(::google::protobuf::int32 value) {
  
  func_port_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatMessage.func_port)
}

// -------------------------------------------------------------------

// CollectData

// string devId = 1;
inline void CollectData::clear_devid() {
  devid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectData::devid() const {
  // @@protoc_insertion_point(field_get:CollectData.devId)
  return devid_.GetNoArena();
}
inline void CollectData::set_devid(const ::std::string& value) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.devId)
}
#if LANG_CXX11
inline void CollectData::set_devid(::std::string&& value) {
  
  devid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.devId)
}
#endif
inline void CollectData::set_devid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.devId)
}
inline void CollectData::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.devId)
}
inline ::std::string* CollectData::mutable_devid() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.devId)
  return devid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectData::release_devid() {
  // @@protoc_insertion_point(field_release:CollectData.devId)
  
  return devid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectData::set_allocated_devid(::std::string* devid) {
  if (devid != NULL) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:CollectData.devId)
}

// string filePath = 2;
inline void CollectData::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectData::filepath() const {
  // @@protoc_insertion_point(field_get:CollectData.filePath)
  return filepath_.GetNoArena();
}
inline void CollectData::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.filePath)
}
#if LANG_CXX11
inline void CollectData::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.filePath)
}
#endif
inline void CollectData::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.filePath)
}
inline void CollectData::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.filePath)
}
inline ::std::string* CollectData::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.filePath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectData::release_filepath() {
  // @@protoc_insertion_point(field_release:CollectData.filePath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectData::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:CollectData.filePath)
}

// string state = 3;
inline void CollectData::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectData::state() const {
  // @@protoc_insertion_point(field_get:CollectData.state)
  return state_.GetNoArena();
}
inline void CollectData::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.state)
}
#if LANG_CXX11
inline void CollectData::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.state)
}
#endif
inline void CollectData::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.state)
}
inline void CollectData::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.state)
}
inline ::std::string* CollectData::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectData::release_state() {
  // @@protoc_insertion_point(field_release:CollectData.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectData::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:CollectData.state)
}

// string time = 4;
inline void CollectData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CollectData::time() const {
  // @@protoc_insertion_point(field_get:CollectData.time)
  return time_.GetNoArena();
}
inline void CollectData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CollectData.time)
}
#if LANG_CXX11
inline void CollectData::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CollectData.time)
}
#endif
inline void CollectData::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CollectData.time)
}
inline void CollectData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CollectData.time)
}
inline ::std::string* CollectData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:CollectData.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollectData::release_time() {
  // @@protoc_insertion_point(field_release:CollectData.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollectData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:CollectData.time)
}

// -------------------------------------------------------------------

// AgentCtrl

// string ipAddr = 1;
inline void AgentCtrl::clear_ipaddr() {
  ipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgentCtrl::ipaddr() const {
  // @@protoc_insertion_point(field_get:AgentCtrl.ipAddr)
  return ipaddr_.GetNoArena();
}
inline void AgentCtrl::set_ipaddr(const ::std::string& value) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AgentCtrl.ipAddr)
}
#if LANG_CXX11
inline void AgentCtrl::set_ipaddr(::std::string&& value) {
  
  ipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AgentCtrl.ipAddr)
}
#endif
inline void AgentCtrl::set_ipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AgentCtrl.ipAddr)
}
inline void AgentCtrl::set_ipaddr(const char* value, size_t size) {
  
  ipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AgentCtrl.ipAddr)
}
inline ::std::string* AgentCtrl::mutable_ipaddr() {
  
  // @@protoc_insertion_point(field_mutable:AgentCtrl.ipAddr)
  return ipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentCtrl::release_ipaddr() {
  // @@protoc_insertion_point(field_release:AgentCtrl.ipAddr)
  
  return ipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentCtrl::set_allocated_ipaddr(::std::string* ipaddr) {
  if (ipaddr != NULL) {
    
  } else {
    
  }
  ipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddr);
  // @@protoc_insertion_point(field_set_allocated:AgentCtrl.ipAddr)
}

// .AgentCtrlType type = 2;
inline void AgentCtrl::clear_type() {
  type_ = 0;
}
inline ::AgentCtrlType AgentCtrl::type() const {
  // @@protoc_insertion_point(field_get:AgentCtrl.type)
  return static_cast< ::AgentCtrlType >(type_);
}
inline void AgentCtrl::set_type(::AgentCtrlType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AgentCtrl.type)
}

// -------------------------------------------------------------------

// MysqlOperUnit

// .MysqlOperType type = 1;
inline void MysqlOperUnit::clear_type() {
  type_ = 0;
}
inline ::MysqlOperType MysqlOperUnit::type() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.type)
  return static_cast< ::MysqlOperType >(type_);
}
inline void MysqlOperUnit::set_type(::MysqlOperType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MysqlOperUnit.type)
}

// string operDesc = 2;
inline void MysqlOperUnit::clear_operdesc() {
  operdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperUnit::operdesc() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.operDesc)
  return operdesc_.GetNoArena();
}
inline void MysqlOperUnit::set_operdesc(const ::std::string& value) {
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.operDesc)
}
#if LANG_CXX11
inline void MysqlOperUnit::set_operdesc(::std::string&& value) {
  
  operdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.operDesc)
}
#endif
inline void MysqlOperUnit::set_operdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.operDesc)
}
inline void MysqlOperUnit::set_operdesc(const char* value, size_t size) {
  
  operdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.operDesc)
}
inline ::std::string* MysqlOperUnit::mutable_operdesc() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.operDesc)
  return operdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperUnit::release_operdesc() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.operDesc)
  
  return operdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperUnit::set_allocated_operdesc(::std::string* operdesc) {
  if (operdesc != NULL) {
    
  } else {
    
  }
  operdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operdesc);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.operDesc)
}

// string sqlStr = 3;
inline void MysqlOperUnit::clear_sqlstr() {
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperUnit::sqlstr() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.sqlStr)
  return sqlstr_.GetNoArena();
}
inline void MysqlOperUnit::set_sqlstr(const ::std::string& value) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.sqlStr)
}
#if LANG_CXX11
inline void MysqlOperUnit::set_sqlstr(::std::string&& value) {
  
  sqlstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.sqlStr)
}
#endif
inline void MysqlOperUnit::set_sqlstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.sqlStr)
}
inline void MysqlOperUnit::set_sqlstr(const char* value, size_t size) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.sqlStr)
}
inline ::std::string* MysqlOperUnit::mutable_sqlstr() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.sqlStr)
  return sqlstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperUnit::release_sqlstr() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.sqlStr)
  
  return sqlstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperUnit::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr != NULL) {
    
  } else {
    
  }
  sqlstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqlstr);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.sqlStr)
}

// string sqlLogType = 4;
inline void MysqlOperUnit::clear_sqllogtype() {
  sqllogtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperUnit::sqllogtype() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.sqlLogType)
  return sqllogtype_.GetNoArena();
}
inline void MysqlOperUnit::set_sqllogtype(const ::std::string& value) {
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperUnit.sqlLogType)
}
#if LANG_CXX11
inline void MysqlOperUnit::set_sqllogtype(::std::string&& value) {
  
  sqllogtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperUnit.sqlLogType)
}
#endif
inline void MysqlOperUnit::set_sqllogtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.sqlLogType)
}
inline void MysqlOperUnit::set_sqllogtype(const char* value, size_t size) {
  
  sqllogtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.sqlLogType)
}
inline ::std::string* MysqlOperUnit::mutable_sqllogtype() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.sqlLogType)
  return sqllogtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperUnit::release_sqllogtype() {
  // @@protoc_insertion_point(field_release:MysqlOperUnit.sqlLogType)
  
  return sqllogtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperUnit::set_allocated_sqllogtype(::std::string* sqllogtype) {
  if (sqllogtype != NULL) {
    
  } else {
    
  }
  sqllogtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqllogtype);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperUnit.sqlLogType)
}

// bool operFlag = 5;
inline void MysqlOperUnit::clear_operflag() {
  operflag_ = false;
}
inline bool MysqlOperUnit::operflag() const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.operFlag)
  return operflag_;
}
inline void MysqlOperUnit::set_operflag(bool value) {
  
  operflag_ = value;
  // @@protoc_insertion_point(field_set:MysqlOperUnit.operFlag)
}

// repeated string requltList = 6;
inline int MysqlOperUnit::requltlist_size() const {
  return requltlist_.size();
}
inline void MysqlOperUnit::clear_requltlist() {
  requltlist_.Clear();
}
inline const ::std::string& MysqlOperUnit::requltlist(int index) const {
  // @@protoc_insertion_point(field_get:MysqlOperUnit.requltList)
  return requltlist_.Get(index);
}
inline ::std::string* MysqlOperUnit::mutable_requltlist(int index) {
  // @@protoc_insertion_point(field_mutable:MysqlOperUnit.requltList)
  return requltlist_.Mutable(index);
}
inline void MysqlOperUnit::set_requltlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MysqlOperUnit.requltList)
  requltlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MysqlOperUnit::set_requltlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:MysqlOperUnit.requltList)
  requltlist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MysqlOperUnit::set_requltlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requltlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MysqlOperUnit.requltList)
}
inline void MysqlOperUnit::set_requltlist(int index, const char* value, size_t size) {
  requltlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MysqlOperUnit.requltList)
}
inline ::std::string* MysqlOperUnit::add_requltlist() {
  // @@protoc_insertion_point(field_add_mutable:MysqlOperUnit.requltList)
  return requltlist_.Add();
}
inline void MysqlOperUnit::add_requltlist(const ::std::string& value) {
  requltlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MysqlOperUnit.requltList)
}
#if LANG_CXX11
inline void MysqlOperUnit::add_requltlist(::std::string&& value) {
  requltlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MysqlOperUnit.requltList)
}
#endif
inline void MysqlOperUnit::add_requltlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requltlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MysqlOperUnit.requltList)
}
inline void MysqlOperUnit::add_requltlist(const char* value, size_t size) {
  requltlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MysqlOperUnit.requltList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlOperUnit::requltlist() const {
  // @@protoc_insertion_point(field_list:MysqlOperUnit.requltList)
  return requltlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlOperUnit::mutable_requltlist() {
  // @@protoc_insertion_point(field_mutable_list:MysqlOperUnit.requltList)
  return &requltlist_;
}

// -------------------------------------------------------------------

// MysqlOperData

// string funcId = 1;
inline void MysqlOperData::clear_funcid() {
  funcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperData::funcid() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.funcId)
  return funcid_.GetNoArena();
}
inline void MysqlOperData::set_funcid(const ::std::string& value) {
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.funcId)
}
#if LANG_CXX11
inline void MysqlOperData::set_funcid(::std::string&& value) {
  
  funcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.funcId)
}
#endif
inline void MysqlOperData::set_funcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.funcId)
}
inline void MysqlOperData::set_funcid(const char* value, size_t size) {
  
  funcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.funcId)
}
inline ::std::string* MysqlOperData::mutable_funcid() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.funcId)
  return funcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperData::release_funcid() {
  // @@protoc_insertion_point(field_release:MysqlOperData.funcId)
  
  return funcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperData::set_allocated_funcid(::std::string* funcid) {
  if (funcid != NULL) {
    
  } else {
    
  }
  funcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), funcid);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.funcId)
}

// string assetId = 2;
inline void MysqlOperData::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperData::assetid() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.assetId)
  return assetid_.GetNoArena();
}
inline void MysqlOperData::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.assetId)
}
#if LANG_CXX11
inline void MysqlOperData::set_assetid(::std::string&& value) {
  
  assetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.assetId)
}
#endif
inline void MysqlOperData::set_assetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.assetId)
}
inline void MysqlOperData::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.assetId)
}
inline ::std::string* MysqlOperData::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperData::release_assetid() {
  // @@protoc_insertion_point(field_release:MysqlOperData.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperData::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.assetId)
}

// repeated .MysqlOperUnit operUnit = 3;
inline int MysqlOperData::operunit_size() const {
  return operunit_.size();
}
inline void MysqlOperData::clear_operunit() {
  operunit_.Clear();
}
inline const ::MysqlOperUnit& MysqlOperData::operunit(int index) const {
  // @@protoc_insertion_point(field_get:MysqlOperData.operUnit)
  return operunit_.Get(index);
}
inline ::MysqlOperUnit* MysqlOperData::mutable_operunit(int index) {
  // @@protoc_insertion_point(field_mutable:MysqlOperData.operUnit)
  return operunit_.Mutable(index);
}
inline ::MysqlOperUnit* MysqlOperData::add_operunit() {
  // @@protoc_insertion_point(field_add:MysqlOperData.operUnit)
  return operunit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >*
MysqlOperData::mutable_operunit() {
  // @@protoc_insertion_point(field_mutable_list:MysqlOperData.operUnit)
  return &operunit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MysqlOperUnit >&
MysqlOperData::operunit() const {
  // @@protoc_insertion_point(field_list:MysqlOperData.operUnit)
  return operunit_;
}

// string userName = 4;
inline void MysqlOperData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperData::username() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.userName)
  return username_.GetNoArena();
}
inline void MysqlOperData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.userName)
}
#if LANG_CXX11
inline void MysqlOperData::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.userName)
}
#endif
inline void MysqlOperData::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.userName)
}
inline void MysqlOperData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.userName)
}
inline ::std::string* MysqlOperData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperData::release_username() {
  // @@protoc_insertion_point(field_release:MysqlOperData.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.userName)
}

// string roleName = 5;
inline void MysqlOperData::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperData::rolename() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.roleName)
  return rolename_.GetNoArena();
}
inline void MysqlOperData::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.roleName)
}
#if LANG_CXX11
inline void MysqlOperData::set_rolename(::std::string&& value) {
  
  rolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.roleName)
}
#endif
inline void MysqlOperData::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.roleName)
}
inline void MysqlOperData::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.roleName)
}
inline ::std::string* MysqlOperData::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.roleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperData::release_rolename() {
  // @@protoc_insertion_point(field_release:MysqlOperData.roleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperData::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.roleName)
}

// string loginAddr = 6;
inline void MysqlOperData::clear_loginaddr() {
  loginaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MysqlOperData::loginaddr() const {
  // @@protoc_insertion_point(field_get:MysqlOperData.loginAddr)
  return loginaddr_.GetNoArena();
}
inline void MysqlOperData::set_loginaddr(const ::std::string& value) {
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MysqlOperData.loginAddr)
}
#if LANG_CXX11
inline void MysqlOperData::set_loginaddr(::std::string&& value) {
  
  loginaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MysqlOperData.loginAddr)
}
#endif
inline void MysqlOperData::set_loginaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MysqlOperData.loginAddr)
}
inline void MysqlOperData::set_loginaddr(const char* value, size_t size) {
  
  loginaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MysqlOperData.loginAddr)
}
inline ::std::string* MysqlOperData::mutable_loginaddr() {
  
  // @@protoc_insertion_point(field_mutable:MysqlOperData.loginAddr)
  return loginaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlOperData::release_loginaddr() {
  // @@protoc_insertion_point(field_release:MysqlOperData.loginAddr)
  
  return loginaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlOperData::set_allocated_loginaddr(::std::string* loginaddr) {
  if (loginaddr != NULL) {
    
  } else {
    
  }
  loginaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginaddr);
  // @@protoc_insertion_point(field_set_allocated:MysqlOperData.loginAddr)
}

// -------------------------------------------------------------------

// Insert_SystemLog

// string sqlStr = 1;
inline void Insert_SystemLog::clear_sqlstr() {
  sqlstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Insert_SystemLog::sqlstr() const {
  // @@protoc_insertion_point(field_get:Insert_SystemLog.sqlStr)
  return sqlstr_.GetNoArena();
}
inline void Insert_SystemLog::set_sqlstr(const ::std::string& value) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Insert_SystemLog.sqlStr)
}
#if LANG_CXX11
inline void Insert_SystemLog::set_sqlstr(::std::string&& value) {
  
  sqlstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Insert_SystemLog.sqlStr)
}
#endif
inline void Insert_SystemLog::set_sqlstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Insert_SystemLog.sqlStr)
}
inline void Insert_SystemLog::set_sqlstr(const char* value, size_t size) {
  
  sqlstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Insert_SystemLog.sqlStr)
}
inline ::std::string* Insert_SystemLog::mutable_sqlstr() {
  
  // @@protoc_insertion_point(field_mutable:Insert_SystemLog.sqlStr)
  return sqlstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Insert_SystemLog::release_sqlstr() {
  // @@protoc_insertion_point(field_release:Insert_SystemLog.sqlStr)
  
  return sqlstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Insert_SystemLog::set_allocated_sqlstr(::std::string* sqlstr) {
  if (sqlstr != NULL) {
    
  } else {
    
  }
  sqlstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sqlstr);
  // @@protoc_insertion_point(field_set_allocated:Insert_SystemLog.sqlStr)
}

// bool result = 2;
inline void Insert_SystemLog::clear_result() {
  result_ = false;
}
inline bool Insert_SystemLog::result() const {
  // @@protoc_insertion_point(field_get:Insert_SystemLog.result)
  return result_;
}
inline void Insert_SystemLog::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Insert_SystemLog.result)
}

// -------------------------------------------------------------------

// MainMessage

// .MessageType msgType = 1;
inline void MainMessage::clear_msgtype() {
  msgtype_ = 0;
}
inline ::MessageType MainMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:MainMessage.msgType)
  return static_cast< ::MessageType >(msgtype_);
}
inline void MainMessage::set_msgtype(::MessageType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:MainMessage.msgType)
}

// .CollectData collectData = 2;
inline bool MainMessage::has_collectdata() const {
  return this != internal_default_instance() && collectdata_ != NULL;
}
inline void MainMessage::clear_collectdata() {
  if (GetArenaNoVirtual() == NULL && collectdata_ != NULL) delete collectdata_;
  collectdata_ = NULL;
}
inline const ::CollectData& MainMessage::collectdata() const {
  // @@protoc_insertion_point(field_get:MainMessage.collectData)
  return collectdata_ != NULL ? *collectdata_
                         : *::CollectData::internal_default_instance();
}
inline ::CollectData* MainMessage::mutable_collectdata() {
  
  if (collectdata_ == NULL) {
    collectdata_ = new ::CollectData;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.collectData)
  return collectdata_;
}
inline ::CollectData* MainMessage::release_collectdata() {
  // @@protoc_insertion_point(field_release:MainMessage.collectData)
  
  ::CollectData* temp = collectdata_;
  collectdata_ = NULL;
  return temp;
}
inline void MainMessage::set_allocated_collectdata(::CollectData* collectdata) {
  delete collectdata_;
  collectdata_ = collectdata;
  if (collectdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.collectData)
}

// .HeartBeatMessage heartBeatMessage = 3;
inline bool MainMessage::has_heartbeatmessage() const {
  return this != internal_default_instance() && heartbeatmessage_ != NULL;
}
inline void MainMessage::clear_heartbeatmessage() {
  if (GetArenaNoVirtual() == NULL && heartbeatmessage_ != NULL) delete heartbeatmessage_;
  heartbeatmessage_ = NULL;
}
inline const ::HeartBeatMessage& MainMessage::heartbeatmessage() const {
  // @@protoc_insertion_point(field_get:MainMessage.heartBeatMessage)
  return heartbeatmessage_ != NULL ? *heartbeatmessage_
                         : *::HeartBeatMessage::internal_default_instance();
}
inline ::HeartBeatMessage* MainMessage::mutable_heartbeatmessage() {
  
  if (heartbeatmessage_ == NULL) {
    heartbeatmessage_ = new ::HeartBeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.heartBeatMessage)
  return heartbeatmessage_;
}
inline ::HeartBeatMessage* MainMessage::release_heartbeatmessage() {
  // @@protoc_insertion_point(field_release:MainMessage.heartBeatMessage)
  
  ::HeartBeatMessage* temp = heartbeatmessage_;
  heartbeatmessage_ = NULL;
  return temp;
}
inline void MainMessage::set_allocated_heartbeatmessage(::HeartBeatMessage* heartbeatmessage) {
  delete heartbeatmessage_;
  heartbeatmessage_ = heartbeatmessage;
  if (heartbeatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.heartBeatMessage)
}

// .MysqlOperData mysqlOperData = 4;
inline bool MainMessage::has_mysqloperdata() const {
  return this != internal_default_instance() && mysqloperdata_ != NULL;
}
inline void MainMessage::clear_mysqloperdata() {
  if (GetArenaNoVirtual() == NULL && mysqloperdata_ != NULL) delete mysqloperdata_;
  mysqloperdata_ = NULL;
}
inline const ::MysqlOperData& MainMessage::mysqloperdata() const {
  // @@protoc_insertion_point(field_get:MainMessage.mysqlOperData)
  return mysqloperdata_ != NULL ? *mysqloperdata_
                         : *::MysqlOperData::internal_default_instance();
}
inline ::MysqlOperData* MainMessage::mutable_mysqloperdata() {
  
  if (mysqloperdata_ == NULL) {
    mysqloperdata_ = new ::MysqlOperData;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.mysqlOperData)
  return mysqloperdata_;
}
inline ::MysqlOperData* MainMessage::release_mysqloperdata() {
  // @@protoc_insertion_point(field_release:MainMessage.mysqlOperData)
  
  ::MysqlOperData* temp = mysqloperdata_;
  mysqloperdata_ = NULL;
  return temp;
}
inline void MainMessage::set_allocated_mysqloperdata(::MysqlOperData* mysqloperdata) {
  delete mysqloperdata_;
  mysqloperdata_ = mysqloperdata;
  if (mysqloperdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.mysqlOperData)
}

// .Insert_SystemLog insert_SystemLog = 5;
inline bool MainMessage::has_insert_systemlog() const {
  return this != internal_default_instance() && insert_systemlog_ != NULL;
}
inline void MainMessage::clear_insert_systemlog() {
  if (GetArenaNoVirtual() == NULL && insert_systemlog_ != NULL) delete insert_systemlog_;
  insert_systemlog_ = NULL;
}
inline const ::Insert_SystemLog& MainMessage::insert_systemlog() const {
  // @@protoc_insertion_point(field_get:MainMessage.insert_SystemLog)
  return insert_systemlog_ != NULL ? *insert_systemlog_
                         : *::Insert_SystemLog::internal_default_instance();
}
inline ::Insert_SystemLog* MainMessage::mutable_insert_systemlog() {
  
  if (insert_systemlog_ == NULL) {
    insert_systemlog_ = new ::Insert_SystemLog;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.insert_SystemLog)
  return insert_systemlog_;
}
inline ::Insert_SystemLog* MainMessage::release_insert_systemlog() {
  // @@protoc_insertion_point(field_release:MainMessage.insert_SystemLog)
  
  ::Insert_SystemLog* temp = insert_systemlog_;
  insert_systemlog_ = NULL;
  return temp;
}
inline void MainMessage::set_allocated_insert_systemlog(::Insert_SystemLog* insert_systemlog) {
  delete insert_systemlog_;
  insert_systemlog_ = insert_systemlog;
  if (insert_systemlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.insert_SystemLog)
}

// .AgentCtrl agentCtrl = 6;
inline bool MainMessage::has_agentctrl() const {
  return this != internal_default_instance() && agentctrl_ != NULL;
}
inline void MainMessage::clear_agentctrl() {
  if (GetArenaNoVirtual() == NULL && agentctrl_ != NULL) delete agentctrl_;
  agentctrl_ = NULL;
}
inline const ::AgentCtrl& MainMessage::agentctrl() const {
  // @@protoc_insertion_point(field_get:MainMessage.agentCtrl)
  return agentctrl_ != NULL ? *agentctrl_
                         : *::AgentCtrl::internal_default_instance();
}
inline ::AgentCtrl* MainMessage::mutable_agentctrl() {
  
  if (agentctrl_ == NULL) {
    agentctrl_ = new ::AgentCtrl;
  }
  // @@protoc_insertion_point(field_mutable:MainMessage.agentCtrl)
  return agentctrl_;
}
inline ::AgentCtrl* MainMessage::release_agentctrl() {
  // @@protoc_insertion_point(field_release:MainMessage.agentCtrl)
  
  ::AgentCtrl* temp = agentctrl_;
  agentctrl_ = NULL;
  return temp;
}
inline void MainMessage::set_allocated_agentctrl(::AgentCtrl* agentctrl) {
  delete agentctrl_;
  agentctrl_ = agentctrl;
  if (agentctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMessage.agentCtrl)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AgentCtrlType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::MysqlOperType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::MessageType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerMonitor_2eproto__INCLUDED
